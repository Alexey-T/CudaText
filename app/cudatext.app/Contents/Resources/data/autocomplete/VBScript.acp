Statement Call name [argumentlist] |Transfers control to a Sub or Function procedure.
Statement Case expressionlist |Executes one or more statements if Select testexpression matches any part of a comma delimited list of one or more expressions.
Statement Case%20Else |Executes one or more statements if Select testexpression doesn't match any of the Case clauses.
Statement Class |Declares the name of a class, as well as a definition of the variables, properties, and methods that comprise the class.
Statement Const constname = expression |Declares constants for use in place of literal values.
Statement Dim varname[([subscripts])][, varname[([subscripts])]] |Declares variables and allocates storage space.
Statement Do |Repeats a block of statements.
Statement Do%20Until condition |Repeats a block of statements until a condition becomes True.
Statement Do%20While condition |Repeats a block of statements while a condition is True.
Statement Else |Executes a group of statements if no previous condition expression is True.
Statement ElseIf condition Then |Executes a group of statements if the associated condition is True.
Statement End%20Function |Ends a Function procedure.
Statement End%20If |Ends a conditional execution of If statement.
Statement End%20Property |Ends a Property procedure.
Statement End%20Select |Ends a conditional execution of Select Case statement.
Statement End%20Sub |Ends a Sub procedure.
Statement End%20With |Ends a With block of statements.
Statement Erase array |Reinitializes the elements of fixed-size arrays and deallocates dynamic-array storage space.
Statement Execute statement |Executes one or more specified statements.
Statement ExecuteGlobal statement |Executes one or more specified statements in the global namespace of a script.
Statement Exit%20Do |Exits a block of Do...Loop code.
Statement Exit%20For |Exits a block of For...Next code.
Statement Exit%20Function |Exits from a Function procedure.
Statement Exit%20Property |Exits from a Property procedure.
Statement Exit%20Sub |Exits from a Sub procedure.
Statement For%20Each element In group |Repeats a group of statements for each element in an array or collection.
Statement For counter = start To end [Step step] |Repeats a group of statements a specified number of times.
Statement Function name [(arglist)] |Declares the name, arguments, and code that form the body of a Function procedure that is accessible to all other procedures in a script..
Statement If condition Then |Conditionally executes a group of statements, depending on the value of an expression.
Statement Loop |Ends the definition of the Do loop.
Statement Loop%20Until condition |Ends the definition of the Do loop if a condition is True.
Statement Loop%20While condition |Ends the definition of the Do loop if a condition is False.
Statement Next |Ends a block of For...Next code.
Statement Next [element] |Ends a block of For Each...Next code.
Statement On%20Error%20GoTo%200 |Enables error-handling.
Statement On%20Error%20Resume%20Next |Disables error-handling.
Statement Option%20Explicit |Forces explicit declaration of all variables in a script.
Statement Private varname[([subscripts])][, varname[([subscripts])]] |Declares private variables and allocates storage space. Declares, in a Class block, a private variable.
Statement Private%20Function name [(arglist)] |Declares the name, arguments, and code that form the body of a Function procedure which is accessible only to other procedures in the script where it is declared or if the function is a member of a class, and that the Function procedure is accessible only to other procedures in that class.
Statement Private%20Property%20Get name [(arglist)] |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that gets (returns) the value of a property which is accessible only to other procedures in the Class block where it is declared.
Statement Private%20Property%20Let name([arglist,] value) |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that assigns (sets) the value of a property which is accessible only to other procedures in the Class block where it is declared.
Statement Private%20Property%20Set name([arglist,] reference) |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that sets a reference to an object which is accessible only to other procedures in the Class block where it is declared.
Statement Private%20Sub name [(arglist)] |Declares the name, arguments, and code that form the body of a Sub procedure which is accessible only to other procedures in the script where it is declared.
Statement Property%20Get name [(arglist)] |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that gets (returns) the value of a property which is visible to all other procedures in a script.
Statement Property%20Let name ([arglist,] value) |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that assigns (sets) the value of a property which is visible to all other procedures in a script.
Statement Property%20Set name([arglist,] reference) |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that sets a reference to an object which is visible to all other procedures in a script.
Statement Public varname[([subscripts])][, varname[([subscripts])]] |Declares public variables and allocates storage space. Declares, in a Class block, a public variable.
Statement Public%20Default%20Function name [(arglist)] |Declares the name, arguments, and code that form the body of a Function procedure in a Class block which is accessible to all other procedures in all scripts as the default method for the class.
Statement Public%20Default%20Property%20Get name [(arglist)] |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure in a Class block which is accessible to all other procedures in all scripts as the default property for the class.
Statement Public%20Default%20Sub name [(arglist)] |Declares the name, arguments, and code that form the body of a Sub procedure in a Class block which is accessible to all other procedures in all scripts as the default method for the class.
Statement Public%20Function name [(arglist)] |Declares the name, arguments, and code that form the body of a Function procedure which is accessible to all other procedures in all scripts.
Statement Public%20Property%20Get name [(arglist)] |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure which is accessible to all other procedures in all scripts.
Statement Public%20Property%20Let name [(arglist)] |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that assigns (sets) the value of a property which is visible to all other procedures in all scripts.
Statement Public%20Property%20Set name([arglist,] reference) |Declares, in a Class block, the name, arguments, and code that form the body of a Property procedure that sets a reference to an object which is visible to all other procedures in all scripts.
Statement Public%20Sub name [(arglist)] |Declares the name, arguments, and code that form the body of a Sub procedure which is accessible to all other procedures in all scripts.
Statement Randomize [number] |Initializes the random-number generator.
Statement ReDim varname(subscripts) [, varname(subscripts)] |Declares dynamic-array variables, and allocates or reallocates storage space at procedure level.
Statement ReDim%20Preserve varname(subscripts) [, varname(subscripts)] |Declares dynamic-array variables, and allocates or reallocates storage space at procedure level. Preserves the data in an existing array when you change the size of the last dimension.
Statement Rem comment |Includes explanatory remarks in a program.
Statement Select%20Case testexpression |Executes one of several groups of statements, depending on the value of an expression.
Statement Set objectvar = objectexpression |Assigns an object reference to a variable or property.
Statement Set objectvar = New classname |Creates a new instance of a class.
Statement Set objectvar = Nothing |Discontinues association of objectvar with any specific object or class.
Statement Set objectvar = GetRef(procname) |Associates a procedure reference with an event, procname is a string containing the name of the Sub or Function being associated.
Statement Stop |Suspends execution.
Statement Sub name [(arglist)] |Declares the name, arguments, and code that form the body of a Sub procedure that is accessible to all other procedures in a script.
Statement Wend |Ends the definition of the While loop.
Statement While condition |Executes a series of statements as long as a given condition is True.
Statement With object |Executes a series of statements on a single object.

Function Abs(number) |Returns the absolute value of a number.
Function Array(arglist) |Returns a Variant containing an array.
Function Asc(string) |Returns the ANSI character code corresponding to the first letter in a string.
Function AscB(string) |Returns the first byte of data contained in a string.
Function AscW(string) |Returns the Unicode (wide) character code corresponding to the first letter in a string.
Function Atn(number) |Returns the arctangent of a number.
Function CBool(expression) |Returns an expression that has been converted to a Variant of subtype Boolean.
Function CByte(expression) |Returns an expression that has been converted to a Variant of subtype Byte.
Function CCur(expression) |Returns an expression that has been converted to a Variant of subtype Currency.
Function CDate(date) |Returns an expression that has been converted to a Variant of subtype Date.
Function CDbl(expression) |Returns an expression that has been converted to a Variant of subtype Double.
Function Chr(charcode) |Returns the character associated with the specified ANSI character code.
Function ChrB(charcode) |Returns a single byte associated with the specified character code.
Function ChrW(charcode) |Returns the character associated with the specified Unicode (wide) character code.
Function CInt(expression) |Returns an expression that has been converted to a Variant of subtype Integer.
Function CLng(expression) |Returns an expression that has been converted to a Variant of subtype Long.
Function Cos(number) |Returns the cosine of an angle.
Function CreateObject(servername.typename [, location]) |Creates and returns a reference to an Automation object.
Function CSng(expression) |Returns an expression that has been converted to a Variant of subtype Single.
Function CStr(expression) |Returns an expression that has been converted to a Variant of subtype String.
Function Date |Returns the current system date.
Function DateAdd(interval, number, date) |Returns a date to which a specified time interval has been added.
Function DateDiff(interval, date1, date2 [,firstdayofweek[, firstweekofyear]]) |Returns the number of intervals between two dates.
Function DatePart(interval, date[, firstdayofweek[, firstweekofyear]]) |Returns the specified part of a given date.
Function DateSerial(year, month, day) |Returns a Variant of subtype Date for a specified year, month, and day.
Function DateValue(date) |Returns a Variant of subtype Date.
Function Day(date) |Returns a whole number between 1 and 31, inclusive, representing the day of the month.
Function Escape(charString) |Encodes a string so it contains only ASCII characters.
Function Eval(expression) |Evaluates an expression and returns the result.
Function Exp(number) |Returns e (the base of natural logarithms) raised to a power.
Function Filter(InputStrings, Value[, Include[, Compare]]) |Returns a zero-based array containing a subset of a string array based on a specified filter criteria.
Function Fix(number) |Returns the integer portion of a number. If number is negative, it returns the first negative integer greater than or equal to number.
Function FormatCurrency(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]) |Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
Function FormatDateTime(Date[, NamedFormat]) |Returns an expression formatted as a date or time.
Function FormatNumber(Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]) |Returns an expression formatted as a number.
Function FormatPercent(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]) |Returns an expression formatted as a percentage (multiplied by 100) with a trailing % character.
Function GetLocale() |Returns the current locale ID value.
Function GetObject([pathname] [, class]) |Returns a reference to an Automation object from a file.
Function GetRef(procname) |Returns a reference to a procedure that can be bound to an event.
Function Hex(number) |Returns a string representing the hexadecimal value of a number.
Function Hour(time) |Returns a whole number between 0 and 23, inclusive, representing the hour of the day.
Function InputBox(prompt[, title][, default][, xpos][, ypos][, helpfile, context]) |Displays a prompt in a dialog box, waits for the user to input text or click a button, and returns the contents of the text box.
Function InStr([start, ]string1, string2[, compare]) |Returns the position of the first occurrence of one string within another.
Function InStrRev(string1, string2[, start[, compare]]) |Returns the position of an occurrence of one string within another, from the end of string.
Function Int(number) |Returns the integer portion of a number. If number is negative, it returns the first negative integer less than or equal to number.
Function IsArray(varname) |Returns a Boolean value indicating whether a variable is an array.
Function IsDate(expression) |Returns a Boolean value indicating whether an expression can be converted to a date.
Function IsEmpty(expression) |Returns a Boolean value indicating whether a variable has been initialized.
Function IsNull(expression) |Returns a Boolean value that indicates whether an expression contains no valid data (Null).
Function IsNumeric(expression) |Returns a Boolean value indicating whether an expression can be evaluated as a number.
Function IsObject(expression) |Returns a Boolean value indicating whether an expression references a valid Automation object.
Function Join(list[, delimiter]) |Returns a string created by joining a number of substrings contained in an array.
Function LBound(arrayname[, dimension]) |Returns the smallest available subscript for the indicated dimension of an array.
Function LCase(string) |Returns a string that has been converted to lowercase.
Function Left(string, length) |Returns a specified number of characters from the left side of a string.
Function Len(string %7C varname) |Returns the number of characters in a string or the number of bytes required to store a variable.
Function LoadPicture(picturename) |Returns a picture object. Available only on 32-bit platforms.
Function Log(number) |Returns the natural logarithm of a number.
Function LTrim(string) |Returns a copy of a string without leading spaces.
Function RTrim(string) |Returns a copy of a string without trailing spaces.
Function Trim(string) |Returns a copy of a string without leading and trailing spaces.
Function Mid(string, start[, length]) |Returns a specified number of characters from a string.
Function Minute(time) |Returns a whole number between 0 and 59, inclusive, representing the minute of the hour.
Function Month(date) |Returns a whole number between 1 and 12, inclusive, representing the month of the year.
Function MonthName(month[, abbreviate]) |Returns a string indicating the specified month.
Function MsgBox(prompt[, buttons][, title][, helpfile, context]) |Displays a message in a dialog box, waits for the user to click a button, and returns a value indicating which button the user clicked.
Function Now |Returns the current date and time according to the setting of your computer's system date and time.
Function Oct(number) |Returns a string representing the octal value of a number.
Function Replace(expression, find, replacewith[, start[, count[, compare]]]) |Returns a string in which a specified substring has been replaced with another substring a specified number of times.
Function RGB(red, green, blue) |Returns a whole number representing an RGB color value.
Function Right(string, length) |Returns a specified number of characters from the right side of a string.
Function Rnd[(number)] |Returns a random number.
Function Round(expression[, numdecimalplaces]) |Returns a number rounded to a specified number of decimal places.
Function ScriptEngine |Returns a string representing the scripting language in use.
Function ScriptEngineBuildVersion |Returns the build version number of the scripting engine in use.
Function ScriptEngineMajorVersion |Returns the major version number of the scripting engine in use.
Function ScriptEngineMinorVersion |Returns the minor version number of the scripting engine in use.
Function Second(time) |Returns a whole number between 0 and 59, inclusive, representing the second of the minute.
Function SetLocale(lcid) |Sets the global locale and returns the previous locale.
Function Sgn(number) |Returns an integer indicating the sign of a number.
Function Sin(number) |Returns the sine of an angle.
Function Space(number) |Returns a string consisting of the specified number of spaces.
Function Split(expression[, delimiter[, count[, compare]]]) |Returns a zero-based, one-dimensional array containing a specified number of substrings.
Function Sqr(number) |Returns the square root of a number.
Function StrComp(string1, string2[, compare]) |Returns a value indicating the result of a string comparison.
Function String(number, character) |Returns a repeating character string of the length specified.
Function StrReverse(string1) |Returns a string in which the character order of a specified string is reversed.
Function Tan(number) |Returns the tangent of an angle.
Function Time |Returns a Variant of subtype Date indicating the current system time.
Function Timer |Returns the number of seconds that have elapsed since 12:00 AM (midnight).
Function TimeSerial(hour, minute, second) |Returns a Variant of subtype Date containing the time for a specific hour, minute, and second.
Function TimeValue(time) |Returns a Variant of subtype Date containing the time.
Function TypeName(varname) |Returns a string that provides Variant subtype information about a variable.
Function UBound(arrayname[, dimension]) |Returns the largest available subscript for the indicated dimension of an array.
Function UCase(string) |Returns a string that has been converted to uppercase.
Function Unescape(charString) |Decodes a string encoded with the Escape function.
Function VarType(varname) |Returns a value indicating the subtype of a variable.
Function Weekday(date, [firstdayofweek]) |Returns a whole number representing the day of the week.
Function WeekdayName(weekday, abbreviate, firstdayofweek) |Returns a string indicating the specified day of the week.
Function Year(date) |Returns a whole number representing the year.

Method Clear |Clears all property settings of the Err object.
Method Execute(string) |Executes a regular expression search against a specified string.
Method Raise(number, source, description, helpfile, helpcontext) |Generates a run-time error.
Method Replace(string1, string2) |Replaces text found in a regular expression search.
Method Test(string) |Executes a regular expression search against a specified string and returns a Boolean value that indicates if a pattern match was found.
Method Debug.Write([str1 [, str2 [, ... [, strN]]]]) |Sends strings to the script debugger.
Method Debug.WriteLine([str1 [, str2 [, ... [, strN]]]]) |Sends strings to the script debugger, followed by a newline character.

Property Count |Indicates the number of items in the collection.
Property Description [= stringexpression] |Returns or sets a descriptive string associated with an error.
Property FirstIndex |Returns the position in a search string where a match occurs.
Property Global |Sets or returns a Boolean value that indicates if a pattern should match all occurrences in an entire search string or just the first one.
Property HelpContext [= contextID] |Sets or returns a context ID for a topic in a Help File.
Property HelpFile [= contextID] |Sets or returns a fully qualified path to a Help File.
Property IgnoreCase |Sets or returns a Boolean value that indicates if a pattern search is case-sensitive or not.
Property Item(index) |Returns the element of a collection at the specified index.
Property Length |Returns the length of a match found in a search string.
Property Number [= errornumber] |Returns or sets a numeric value specifying an error. Number is the Err object's default property.
Property Pattern [= searchstring] |Sets or returns the regular expression pattern being searched for.
Property Source [= stringexpression] |Returns or sets the name of the object or application that originally generated the error.
Property SubMatches |Returns the submatches of a Match Object object.
Property Value |Returns the value or text of a match found in a search string.

Event Class_Initialize() |Occurs when an instance of the associated class is created.
Event Class_Terminate() |Occurs when an instance of the associated class is terminated.

Object Class |This object is created by using the Class statement, and it provides access to the events of the class.
Object Debug |An intrinsic global object that can send output to a script debugger, such as the Microsoft Script Debugger.
Object Err |Contains information about run-time errors. Accepts the Raise and Clear methods for generating and clearing run-time errors.
Object Match |Provides access to the read-only properties of a regular expression match.
Object Matches |Collection of regular expression Match objects.
Object RegExp |Provides simple regular expression support.
Object SubMatches |Collection of regular expression submatch strings.

Operator And |Performs a logical conjunction on two expressions.
Operator Eqv |Performs a logical equivalence on two expressions.
Operator Imp |Performs a logical implication on two expressions.
Operator Is |Compares two object reference variables.
Operator Mod |Divides two integers and returns the integer remainder.
Operator Not |Performs logical negation on an expression.
Operator Or |Performs a logical disjunction on two expressions.
Operator Xor |Performs a logical exclusion on two expressions.

Keyword Empty |Used to indicate an uninitialized variable value.
Keyword False |The False keyword has a value equal to 0.
Keyword Nothing |Used to disassociate an object variable from any actual object.
Keyword Null |Used to indicate that a variable contains no valid data.
Keyword True |The True keyword has a value equal to -1.

Keyword ByRef |Indicates that the argument is passed by reference. If ByVal and ByRef are omitted, the default is ByRef.
Keyword ByVal |Indicates that the argument is passed by value.
Keyword In |Used in For Each..Next loop.
Keyword New |Used with Set statement to create a new instance of a class.
Keyword Step |Used in For..Next loop.
Keyword Then |Used with If statement.
Keyword To |Used in For..Next loop.

Constant vbBlack |&h00
Constant vbRed |&hFF
Constant vbGreen |&hFF00
Constant vbYellow |&hFFFF
Constant vbBlue |&hFF0000
Constant vbMagenta |&hFF00FF
Constant vbCyan |&hFFFF00
Constant vbWhite |&hFFFFFF

Constant vbBinaryCompare |0 - Perform a binary comparison.
Constant vbTextCompare |1 - Perform a textual comparison.

Constant vbSunday |1
Constant vbMonday |2
Constant vbTuesday |3
Constant vbWednesday |4
Constant vbThursday |5
Constant vbFriday |6
Constant vbSaturday |7
Constant vbUseSystemDayOfWeek |0
Constant vbFirstJan1 |1
Constant vbFirstFourDays |2
Constant vbFirstFullWeek |3

Constant vbGeneralDate |0 - Display a date and/or time.
Constant vbLongDate |1 - Display a date using the long date format specified in your computer's regional settings.
Constant vbShortDate |2 - Display a date using the short date format specified in your computer's regional settings.
Constant vbLongTime |3 - Display a time using the long time format specified in your computer's regional settings.
Constant vbShortTime |4 - Display a time using the short time format specified in your computer's regional settings.

Constant vbObjectError |-2147221504 - User-defined error numbers should be greater than this value.

Constant vbOKOnly |0
Constant vbOKCancel |1
Constant vbAbortRetryIgnore |2
Constant vbYesNoCancel |3
Constant vbYesNo |4
Constant vbRetryCancel |5
Constant vbCritical |16
Constant vbQuestion |32
Constant vbExclamation |48
Constant vbInformation |64
Constant vbDefaultButton1 |0
Constant vbDefaultButton2 |256
Constant vbDefaultButton3 |512
Constant vbDefaultButton4 |768
Constant vbApplicationModal |0
Constant vbSystemModal |4096

Constant vbOK |1
Constant vbCancel |2
Constant vbAbort |3
Constant vbRetry |4
Constant vbIgnore |5
Constant vbYes |6
Constant vbNo |7

Constant vbCr |Chr(13) - Carriage return.
Constant VbCrLf |Chr(13) & Chr(10) - Carriage return-linefeed combination.
Constant vbFormFeed |Chr(12) - Form feed; not useful in Microsoft Windows.
Constant vbLf |Chr(10) - Line feed.
Constant vbNewLine |Chr(13) & Chr(10) or Chr(10) - Platform-specific newline. character
Constant vbNullChar |Chr(0) - Character having the value 0.
Constant vbNullString |String having value 0 - Not the same as a zero-length string (""); used for calling external procedures.
Constant vbTab |Chr(9) - Horizontal tab.
Constant vbVerticalTab |Chr(11) - Vertical tab; not useful in Microsoft Windows.

Constant vbEmpty |0 - Uninitialized (default)
Constant vbNull |1 - Contains no valid data
Constant vbInteger |2 - Integer subtype
Constant vbLong |3 - Long subtype
Constant vbSingle |4 - Single subtype
Constant vbDouble |5 - Double subtype
Constant vbCurrency |6 - Currency subtype
Constant vbDate |7 - Date subtype
Constant vbString |8 - String subtype
Constant vbObject |9 - Object
Constant vbError |10 - Error subtype
Constant vbBoolean |11 - Boolean subtype
Constant vbVariant |12 - Variant (used only for arrays of variants)
Constant vbDataObject |13 - Data access object
Constant vbDecimal |14 - Decimal subtype
Constant vbByte |17 - Byte subtype
Constant vbArray |8192 - Array
