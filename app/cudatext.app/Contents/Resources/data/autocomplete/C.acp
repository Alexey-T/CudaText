Keyword __asm
Keyword __based1
Keyword __cdecl
Keyword __declspec
Keyword __except
Keyword __fastcall
Keyword __finally
Keyword __inline
Keyword __int16
Keyword __int32
Keyword __int64
Keyword __int8
Keyword __leave
Keyword __stdcall
Keyword __try
Keyword auto
Keyword break
Keyword case
Keyword char
Keyword const
Keyword continue
Keyword default
Keyword dllexport2
Keyword dllimport2
Keyword do
Keyword double
Keyword else
Keyword enum
Keyword extern
Keyword float
Keyword for
Keyword goto
Keyword if
Keyword include
Keyword int
Keyword long
Keyword long
Keyword naked2
Keyword register
Keyword return
Keyword short
Keyword signed
Keyword sizeof
Keyword static
Keyword switch
Keyword thread2
Keyword typedef
Keyword union
Keyword unsigned
Keyword void
Keyword volatile
Keyword while
Function abort |terminate execution abnormally <stdlib.h>
Function abs(int) |absolute value of an integer. <stdlib.h>
Function acos |inverse cosine <math.h>
Function acosh |inverse hyperbolic cosine <math.h>
Function asctime(const struct tm* tmptr) |Convert tm to a string in the format "Www Mmm dd hh:mm:ss yyyy", where Www is the weekday, Mmm the month in letters, dd the day of the month, hh:mm:ss the time, and yyyy the year. <time.h>
Function asin |inverse sine <math.h>
Function asinh |inverse hyperbolic sine <math.h>
Function atan |one-parameter inverse tangent <math.h>
Function atan2 |two-parameter inverse tangent <math.h>
Function atanh |inverse hyperbolic tangent <math.h>
Function atexit |register a callback function for program exit <stdlib.h>
Function atof |string to double (NOT float) <stdlib.h>
Function atoi |string to integer <stdlib.h>
Function atol |string to long <stdlib.h>
Function bsearch |binary search an array <stdlib.h>
Function cabs(double complex) |Complex magnitude <complex.h>
Function cacos(double complex) |Complex inverse cosine <complex.h>
Function cacosh(double complex) |Complex inverse hyperbolic cosine <complex.h>
Function calloc |allocate memory from the heap <stdlib.h>
Function carg(double complex) |Complex argument <complex.h>
Function casin(double complex) |Complex inverse sine <complex.h>
Function casinh(double complex) |Complex inverse hyperbolic sine <complex.h>
Function catan(double complex) |Complex inverse tangent <complex.h>
Function catan2 |two-parameter inverse tangent <complex.h>
Function catanh(double complex) |Complex inverse hyperbolic tangent <complex.h>
Function cbrt |cube root <math.h>
Function cceil |ceiling, the smallest integer not less than parameter <complex.h>
Function ccos(double complex) |Complex cosine <complex.h>
Function ccosh(double complex) |Complex hyperbolic cosine <complex.h>
Function ceil |ceiling, the smallest integer not less than parameter <math.h>
Function cexp(double complex) |Complex exponential <complex.h>
Function cfabs |absolute value (of a floating-point number) <complex.h>
Function cfloor |floor, the largest integer not greater than parameter <complex.h>
Function cfmod |floating-point remainder <complex.h>
Function cfrexp |break floating-point number down into mantissa and exponent <complex.h>
Function cimag(double complex) |Imaginary part of complex number <complex.h>
Function cldexp |scale floating-point number by exponent (see article) <complex.h>
Function clearerr |clears end-of-file and error indicators for a given stream <stdio.h>
Function clock_t clock(void) |Return number of clock ticks since process start. <time.h>
Function clog(double complex) |Complex logarithm <complex.h>
Function clog10 |base-10 logarithm <complex.h>
Function cmodf(x,p) |returns fractional part of x and stores integral part where pointer p points to <complex.h>
Function conj(double complex) |Complex conjugate <complex.h>
Function copysign(x,y) |returns the value of x with the sign of y <math.h>
Function cos |cosine <math.h>
Function cosh |hyperbolic cosine <math.h>
Function cpow(double complex, double complex) |Complex power <complex.h>
Function cproj(double complex) |Complex projection <complex.h>
Function creal(double complex) |Real part of complex number <complex.h>
Function csin(double complex) |Complex sine <complex.h>
Function csinh(double complex) |Complex hyperbolic sine <complex.h>
Function csqrt(double complex) |Complex square root <complex.h>
Function ctan(double complex) |Complex tangent <complex.h>
Function ctanh(double complex) |Complex hyperbolic tangent <complex.h>
Function ctime(const time_t* timer) |Convert time_t time value to string in the same format as asctime. <time.h>
Function difftime(time_t timer2, time_t timer1) |Returns the difference in seconds between the two times. <time.h>
Function div |integer division (returns quotient and remainder) <stdlib.h>
Function erf |error function <math.h>
Function erfc |complementary error function <math.h>
Function exit |terminate program execution <stdlib.h>
Function exp |exponential function <math.h>
Function exp2(x) |raise 2 to the power of x, 2x <math.h>
Function expm1(x) |one less than the exponential of x, ex - 1 <math.h>
Function fabs |absolute value (of a floating-point number) <math.h>
Function fclose |closes a file associated with the FILE * value passed to it <stdio.h>
Function fdim(x,y) |positive difference between x and y, fmax(x-y, 0) <math.h>
Function feclearexcept(Function excepts) |clear exceptions specified by excepts <fenv.h>
Function fegetenv(fenv_t *penv) |store current floating-poFunction environment in penv <fenv.h>
Function fegetexceptflag(fexcept_t *pflag, Function excepts) |store current status flags in pflags <fenv.h>
Function fegetround(void) |retrieve current rounding direction <fenv.h>
Function feholdexcept(fenv_t *penv) |save current floating-poFunction environment to penv and clear all exceptions <fenv.h>
Function feof |checks whether an end-of-file indicator has been set for a given stream <stdio.h>
Function feraiseexcept(Function excepts) |raise floating-poFunction exceptions <fenv.h>
Function ferror |checks whether an error indicator has been set for a given stream <stdio.h>
Function fesetenv(const fenv_t *penv) |set current floating-poFunction environment to penv <fenv.h>
Function fesetexceptflag(const fexcept_t *pflags, Function excepts) |set current status flags to those stored in pflags <fenv.h>
Function fesetround(Function round) |set current rounding direction to round <fenv.h>
Function fetestexcept(Function excepts) |test whether certain exceptions have been raised <fenv.h>
Function feupdateenv(const fenv_t *penv) |restore floating-poFunction environment penv, but keep current exceptions <fenv.h>
Function fflush |forces any pending buffered output to be written to the file associated with a given stream <stdio.h>
Function fgetc |returns one character from a file <stdio.h>
Function fgetpos |stores the file position indicator of the stream associated by its first argument (a FILE *) to its second argument (a fpos_t *) <stdio.h>
Function fgets |gets a string from the file (ending at newline or end-of-file) <stdio.h>
Function floor |floor, the largest integer not greater than parameter <math.h>
Function fma(x,y,z) |multiply and add, (x * y) + z <math.h>
Function fmax(x,y) |largest value of x and y <math.h>
Function fmin(x,y) |smallest value of x and y <math.h>
Function fmod |floating-point remainder <math.h>
Function fopen |opens a file for certain types of reading or writing <stdio.h>
Function fprintf |used to print to a file <stdio.h>
Function fputc |writes one character to a file <stdio.h>
Function fputchar |has the same effects as putc(stdout) <stdio.h>
Function fputs |writes a string to a file <stdio.h>
Function fread |reads data from a file <stdio.h>
Function free |release memory back to the heap <stdlib.h>
Function freopen |opens a file for certain types of reading or writing <stdio.h>
Function frexp |break floating-point number down into mantissa and exponent <math.h>
Function fscanf |used to input from a file <stdio.h>
Function fseek |seeks through a file <stdio.h>
Function fsetpos |sets the file position indicator of a stream associated by its first argument (a FILE *) as stored in its second argument (a fpos_t *) <stdio.h>
Function ftell |returns a file-position indicator which can then be passed to fseek <stdio.h>
Function fwrite |writes data to a file <stdio.h>
Function getc |reads and returns a character from a given stream and advances the file position indicator; it is allowed to be a macro with the same effects as fgetc, except that it may evaluate the stream more than once <stdio.h>
Function getchar |has the same effects as getc(stdin) <stdio.h>
Function getenv |retrieve an environment variable <stdlib.h>
Function gets |reads characters from stdin until a newline is encountered and stores them in its only argument <stdio.h>
Function hypot(x,y) |hypotenuse, sqrt(x2 + y2) <math.h>
Function ilogb |the exponent of a floating-point value, converted to an int <math.h>
Function isalnum |test for alphanumeric character <ctype.h>
Function isalpha |test for alphabetic character <ctype.h>
Function isblank |test for blank character (new in C99) <ctype.h>
Function iscntrl |test for control character <ctype.h>
Function isdigit |test for digit. Not locale-specific. <ctype.h>
Function isgraph |test for graphic character, excluding the space character. <ctype.h>
Function islower |test for lowercase character <ctype.h>
Function isprint |test for printable character, including the space character. <ctype.h>
Function ispunct |test for punctuation character <ctype.h>
Function isspace |test for any whitespace character <ctype.h>
Function isupper |test for uppercase character <ctype.h>
Function iswalnum(wint_t ch) |Return non-zero if ch is alphanumeric <wctype.h>
Function iswalpha(wint_t ch) |Return non-zero if ch is alphabetic <wctype.h>
Function iswblank(wint_t ch) |Return non-zero if ch is blank <wctype.h>
Function iswcntrl(wint_t ch) |Return non-zero if ch is a control character <wctype.h>
Function iswctype(wint_t ch, wctype_t charclass) |Return non-zero if ch is in charclass <wctype.h>
Function iswdigit(wint_t ch) |Return non-zero if ch is a digit <wctype.h>
Function iswgraph(wint_t ch) |Return non-zero if ch is a visible character <wctype.h>
Function iswlower(wint_t ch) |Return non-zero if ch is a lowercase letter <wctype.h>
Function iswprint(wint_t ch) |Return non-zero if ch is printable <wctype.h>
Function iswpunct(wint_t ch) |Return non-zero if ch is punctuation <wctype.h>
Function iswspace(wint_t ch) |Return non-zero if ch is white-space <wctype.h>
Function iswupper(wint_t ch) |Return non-zero if ch is an uppercase letter <wctype.h>
Function iswxdigit(wint_t ch) |Return non-zero if ch is a hexadecimal digit <wctype.h>
Function isxdigit |test for hexadecimal digit. Not locale-specific. <ctype.h>
Function labs(long int) |absolute value of a long integer. <stdlib.h>
Function ldexp |scale floating-point number by exponent (see article) <math.h>
Function ldiv |long integer division (returns quotient and remainder) <stdlib.h>
Function lgamma |natural log of the absolute value of the gamma function <math.h>
Function llrint |round to integer (returns long long) using current rounding mode <math.h>
Function llround |round to integer (returns long long) <math.h>
Function localeconv(void) | <locale.h>
Function log |natural logarithm <math.h>
Function log10 |base-10 logarithm <math.h>
Function log1p(x) |natural logarithm of 1 + x <math.h>
Function log2 |base-2 logarithm <math.h>
Function logb |extract exponent from floating-point number <math.h>
Function longjmp(jmp_buf env, int value) |Restores the context of the environment buffer env that was saved by invocation of the setjmp routine in the same invocation of the program. <setjmp.h>
Function lrint |round to integer (returns long) using current rounding mode <math.h>
Function lround |round to integer (returns long) <math.h>
Function main |Program recognized by the system that calls all subprograms
Function malloc |allocate memory from the heap <stdlib.h>
Function max |returns the larger of any two numbers <stdlib.h>
Function mblen |size of multibyte char <stdlib.h>
Function mbstowcs |multibyte & wide character conversion <stdlib.h>
Function mbtowc |multibyte & wide character conversion <stdlib.h>
Function memchr(const void *s, char c, size_t n) |returns a pointer to the first occurrence of c in the first n bytes of s, or NULL if not found <string.h>
Function memcmp(const void *s1, const void *s2, size_t n) |compares the first n characters of two memory areas <string.h>
Function memcpy(void *dest, const void *src, size_t n) |copies n bytes between two memory areas; if there is overlap, the behavior is undefined <string.h>
Function memmove(void *dest, const void *src, size_t n) |copies n bytes between two memory areas; unlike with memcpy the areas may overlap <string.h>
Function memset(void *, int, size_t) |overwrites a memory area with a byte pattern <string.h>
Function min |returns the smaller of any two numbers <stdlib.h>
Function mktime(struct tm* ptm) |Convert tm to a time_t time value. <time.h>
Function modf(x,p) |returns fractional part of x and stores integral part where pointer p points to <math.h>
Function nan(s) |returns NaN, possibly using string argument <math.h>
Function nearbyint |round floating-point number to nearest integer <math.h>
Function nextafter(x,y) |returns next representable value after x (towards y) <math.h>
Function nexttoward(x,y) |same as nextafter, except y is always a long double <math.h>
Function perror |writes an error message to stderr <stdio.h>
Function pow(x,y) |raise x to the power of y, xy <math.h>
Function printf |used to print to the standard output stream <stdio.h>
Function psignal(int sig, const char *s) |Outputs to stderr a string representation of a signal number. <signal.h>
Function putc |writes and returns a character to a stream and advances the file position indicator for it; equivalent to fputc, except that a macro version may evaluate the stream more than once <stdio.h>
Function putchar |has the same effects as putc(stdout) <stdio.h>
Function puts |outputs a character string to stdout <stdio.h>
Function qsort |sort an array <stdlib.h>
Function raise(int sig) |This raises a signal artificially. <signal.h>
Function rand(void) |generates a pseudo-random number <stdlib.h>
Function random(void) |generates a pseudo-random number <stdlib.h>
Function realloc |allocate memory from the heap <stdlib.h>
Function remainder(x,y) |calculates remainder, as required by IEC 60559 <math.h>
Function remove |removes a file (deletes it) <stdio.h>
Function remquo(x,y,p) |same as remainder, but store quotient (as int) at target of pointer p <math.h>
Function rename |renames a file <stdio.h>
Function rewind |acts as if fseek(stream, 0L, SEEK_SET) was called for the stream passed, and then its error indicator cleared <stdio.h>
Function rint |round to integer (returns double) using current rounding mode <math.h>
Function round |round to integer (returns double), rounding halfway cases away from zero <math.h>
Function scalbln(x,n) |x * FLT_RADIXn (n is long) <math.h>
Function scalbn(x,n) |x * FLT_RADIXn (n is int) <math.h>
Function scanf |used to input from the standard input stream <stdio.h>
Function setbuf |sets the buffering mode for a given stream <stdio.h>
Function setjmp(jmp_buf env) |Sets up the local jmp_buf buffer and initializes it for the jump. <setjmp.h>
Function setlocale(int, const char*) | <locale.h>
Function setvbuf |sets the buffering mode for a given stream <stdio.h>
Function signal(int sig, void (*func)(int)) | Sets the action taken when the program receives the signal sig. <signal.h>
Function sin |sine <math.h>
Function sinh |hyperbolic sine <math.h>
Function snprintf |used to print to a char array (C string) <stdio.h>
Function sprintf |used to print to a char array (C string) <stdio.h>
Function sqrt |square root <math.h>
Function srand(unsigned int seed) |set the pseudo-random generator seed [common convention uses time() to seed] <stdlib.h>
Function srandom(unsigned int seed) |set the pseudo-random generator seed [common convention uses time() to seed] <stdlib.h>
Function sscanf |used to input from a char array (e.g., a C string) <stdio.h>
Function strcat(char *dest, const char *src) |appends the string src to dest <string.h>
Function strchr(const char *, int) |locates a character in a string, searching from the beginning <string.h>
Function strcmp(const char *, const char *) |compares two strings lexicographically <string.h>
Function strcoll(const char *, const char *) |compares two strings using the current locale's collating order <string.h>
Function strcpy(char *toHere, const char *fromHere) |copies a string from one location to another <string.h>
Function strcspn(const char *s, const char *reject) |determines the length of the maximal initial substring of s consisting entirely of characters not in reject <string.h>
Function strerror(int) |returns the string representation of an error number e.g. errno (not thread-safe) <string.h>
Function strftime(char* s, size t n, const char* format, const struct tm* tptr) |Format tm into a date/time string. <time.h>
Function strlen(const char *) |finds the length of a C string <string.h>
Function strncat(char *dest, const char *src, size_t n) |appends at most n characters of the string src to dest <string.h>
Function strncmp(const char *, const char *, size_t) |compares up to the first n bytes of two strings lexicographically <string.h>
Function strncpy(char *toHere, const char *fromHere, size_t) |copies up to n bytes of a string from one location to another <string.h>
Function strpbrk(const char *s, const char *accept) |finds the first occurrence of any character in accept in s <string.h>
Function strptime(const char* buf, const char* format, struct tm* tptr) |Scan values from buf string into tptr struct. <time.h>
Function strrchr(const char *, int) |locates a character in a string, searching from the end <string.h>
Function strspn(const char *s, const char *accept) |determines the length of the maximal initial substring of s consisting entirely of characters in accept <string.h>
Function strstr(const char *haystack, const char *needle) |finds the first occurrence of the string "needle" in the longer string "haystack". <string.h>
Function strtod |string to double <stdlib.h>
Function strtok(char *, const char *) |parses a string into a sequence of tokens; non-thread safe in the spec, non-reentrant <string.h>
Function strtol |string to long int <stdlib.h>
Function strtoll |string to long long int <stdlib.h>
Function strtoul |string to unsigned long int <stdlib.h>
Function strtoull |string to unsigned long long int <stdlib.h>
Function strxfrm(char *dest, const char *src, size_t n) |transforms src into a collating form, such that the numerical sort order of the transformed string is equivalent to the collating order of src. <string.h>
Function system |execute an external command <stdlib.h>
Function tan |tangent <math.h>
Function tanh |hyperbolic tangent <math.h>
Function tgamma |gamma function <math.h>
Function time(time_t* timer) |Get the current time (number of seconds from the epoch) from the system clock. <time.h>
Function timegm(struct tm *brokentime) |timegm is functionally identical to mktime except it always takes the input values to be Coordinated Universal Time (UTC) regardless of any local time zone setting. <time.h>
Function tm* gmtime(const time_t* timer) |Convert a time_t value to a tm structure as UTC time. <time.h>
Function tm* gmtime_r(const time_t* timer, struct tm* result) |Convert a time_t value to a tm structure as UTC time. <time.h>
Function tm* localtime(const time_t* timer) |Convert a time_t time value to a tm structure as local time (ie time adjusted for the local time zone and daylight savings). <time.h>
Function tmpfile |creates and opens a temporary file, which is deleted when closed with fclose() <stdio.h>
Function tmpnam |creates a temporary filename <stdio.h>
Function tolower |convert character to lowercase <ctype.h>
Function toupper |convert character to uppercase <ctype.h>
Function trunc |truncate floating-point number <math.h>
Function ungetc |pushes a character back onto a stream <stdio.h>
Function vfprintf |used to print to a file <stdio.h>
Function vfscanf |used to input from a file <stdio.h>
Function vprintf |used to print to the standard output stream <stdio.h>
Function vscanf |used to input from the standard input stream <stdio.h>
Function vsnprintf |used to print to a char array (C string) <stdio.h>
Function vsprintf |used to print to a char array (C string) <stdio.h>
Function vsscanf |used to input from a char array (e.g., a C string) <stdio.h>
Function wcscasecmp(const wchar_t *s1, const wchar_t *s2) |is the wide-character equivalent of the strcasecmp function. It compares the wide-character string pointed to by s1 and the wide-character string pointed to by s2, ignoring case differences. <wchar.h>
Function wcscmp(const wchar_t *s1, const wchar_t *s2) |Is the wide-character equivalent of the strcmp function. It compares the wide-character string pointed to by s1 and the wide-character string pointed to by s2. <wchar.h>
Function wcsncasecmp(const wchar_t *s1, const wchar_t *s2, size_t n) |is similar to wcscasecm), except it only compares the first n characters of s1.
Function wcsncmp(const wchar_t *s1, const wchar_t *s2, size_t n) |is the wide-character equivalent of the strncmp function. It is similar to wcscmp(), except it only compares the first n characters of s1. <wchar.h>
Function wcstombs |multibyte & wide character conversion <stdlib.h>
Function wctomb |multibyte & wide character conversion <stdlib.h>
Library assert.h |Contains the assert macro, used to assist with detecting logical errors and other types of bug in debugging versions of a program.
Library complex.h |A set of functions for manipulating complex numbers.
Library ctype.h |Contains functions used to classify characters by their types or to convert between upper and lower case in a way that is independent of the used character set (typically ASCII or one of its extensions, although implementations utilizing EBCDIC are also known).
Library errno.h |For testing error codes reported by library functions.
Library fenv.h |For controlling floating-point environment.
Library float.h |Contains defined constants specifying the implementation-specific properties of the floating-point library, such as the minimum difference between two different floating-point numbers (_EPSILON), the maximum number of digits of accuracy (_DIG) and the range of numbers which can be represented (_MIN, _MAX).
Library inttypes.h |For precise conversion between integer types.
Library iso646.h |For programming in ISO 646 variant character sets.
Library limits.h |Contains defined constants specifying the implementation-specific properties of the integer types, such as the range of numbers which can be represented (_MIN, _MAX).
Library locale.h |For setlocale and related constants. This is used to choose an appropriate locale.
Library math.h |For computing common mathematical functions.
Library setjmp.h |Declares the macros setjmp and longjmp, which are used for non-local exits.
Library signal.h |For controlling various exceptional conditions.
Library stdarg.h |For accessing a varying number of arguments passed to functions.
Library stdbool.h |For a boolean data type.
Library stddef.h |For defining several useful types and macros.
Library stdint.h |For defining various integer types.
Library stdio.h |Provides the core input and output capabilities of the C language. This file includes the venerable printf function.
Library stdlib.h |For performing a variety of operations, including conversion, pseudo-random numbers, memory allocation, process control, environment, signalling, searching, and sorting.
Library string.h |For manipulating several kinds of strings.
Library tgmath.h |For type-generic mathematical functions.
Library time.h |For converting between various time and date formats.
Library wchar.h |For manipulating wide streams and several kinds of strings using wide characters - key to supporting a range of languages.
Library wctype.h |For classifying wide characters.
