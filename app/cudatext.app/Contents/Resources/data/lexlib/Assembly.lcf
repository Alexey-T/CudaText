object SyntAnal2: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id operators'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id registers'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id directives'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id vars'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment /*-*/'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment //'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment #|;'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '[;|\#].*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Segment'
      StyleName = 'Id directives'
      TokenType = 6
      Expression = '\bsegment\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label in tree'
      StyleName = 'Label'
      Expression = '^[\x20\x09]* [a-z_\.][\w\.]*:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      TokenType = 2
      Expression = '@{1,2}\w+ | @@:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '[\da-f]+h\b | [01]+b\b | 0x\h+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+d?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_%]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') .*? \1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\.,:\-\+\*\\/%@<>\(\)\[\]\{\}\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id registers'
      StyleName = 'Id registers'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ah'
            'al'
            'ax'
            'bh'
            'bl'
            'bp'
            'bx'
            'ch'
            'cl'
            'cs'
            'cx'
            'dh'
            'di'
            'ds'
            'dx'
            'eax'
            'ebp'
            'ebx'
            'ecx'
            'edi'
            'edx'
            'eip'
            'es'
            'esc'
            'esi'
            'esp'
            'fs'
            'gs'
            'r10'
            'r11'
            'r12'
            'r13'
            'r14'
            'r15'
            'r8'
            'r9'
            'rax'
            'rbp'
            'rbx'
            'rcx'
            'rdi'
            'rdx'
            'rsi'
            'rsp'
            'si'
            'sp'
            'ss')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id opcodes'
      StyleName = 'Id operators'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            ''
            'AAA'
            'AAD'
            'AAM'
            'AAS'
            'ADC'
            'ADCX'
            'ADD'
            'ADDPD'
            'ADDPS'
            'ADDSD'
            'ADDSS'
            'ADDSUBPD'
            'ADDSUBPS'
            'ADOX'
            'AESDEC'
            'AESDECLAST'
            'AESENC'
            'AESENCLAST'
            'AESIMC'
            'AESKEYGENASSIST'
            'AND'
            'ANDN'
            'ANDNPD'
            'ANDNPS'
            'ANDPD'
            'ANDPS'
            'ARPL'
            'BEXTR'
            'BLENDPD'
            'BLENDPS'
            'BLENDVPD'
            'BLENDVPS'
            'BLSI'
            'BLSMSK'
            'BLSR'
            'BNDCL'
            'BNDCN'
            'BNDCU'
            'BNDLDX'
            'BNDMK'
            'BNDMOV'
            'BNDSTX'
            'BOUND'
            'BSF'
            'BSR'
            'BSWAP'
            'BT'
            'BTC'
            'BTR'
            'BTS'
            'BZHI'
            'CALL'
            'CBTW'
            'CBW'
            'CDQ'
            'CDQE'
            'CLAC'
            'CLC'
            'CLD'
            'CLDEMOTE'
            'CLFLUSH'
            'CLFLUSHOPT'
            'CLI'
            'CLTD'
            'CLTS'
            'CLWB'
            'CMC'
            'CMOVA'
            'CMOVAE'
            'CMOVB'
            'CMOVBE'
            'CMOVC'
            'CMOVE'
            'CMOVG'
            'CMOVGE'
            'CMOVL'
            'CMOVLE'
            'CMOVNA'
            'CMOVNAE'
            'CMOVNB'
            'CMOVNBE'
            'CMOVNC'
            'CMOVNE'
            'CMOVNG'
            'CMOVNGE'
            'CMOVNL'
            'CMOVNLE'
            'CMOVNO'
            'CMOVNP'
            'CMOVNS'
            'CMOVNZ'
            'CMOVO'
            'CMOVP'
            'CMOVPE'
            'CMOVPO'
            'CMOVS'
            'CMOVZ'
            'CMP'
            'CMPPD'
            'CMPPS'
            'CMPS'
            'CMPSB'
            'CMPSD'
            'CMPSQ'
            'CMPSS'
            'CMPSW'
            'CMPXCHG'
            'CMPXCHG16B'
            'CMPXCHG8B'
            'COMISD'
            'COMISS'
            'CPUID'
            'CQO'
            'CRC32'
            'CVTDQ2PD'
            'CVTDQ2PS'
            'CVTPD2DQ'
            'CVTPD2PI'
            'CVTPD2PS'
            'CVTPI2PD'
            'CVTPI2PS'
            'CVTPS2DQ'
            'CVTPS2PD'
            'CVTPS2PI'
            'CVTSD2SI'
            'CVTSD2SS'
            'CVTSI2SD'
            'CVTSI2SS'
            'CVTSS2SD'
            'CVTSS2SI'
            'CVTTPD2DQ'
            'CVTTPD2PI'
            'CVTTPS2DQ'
            'CVTTPS2PI'
            'CVTTSD2SI'
            'CVTTSS2SI'
            'CWD'
            'CWDE'
            'CWTD'
            'CWTL'
            'DAA'
            'DAS'
            'DEC'
            'DIV'
            'DIVPD'
            'DIVPS'
            'DIVSD'
            'DIVSS'
            'DPPD'
            'DPPS'
            'EMMS'
            'ENTER'
            'EXTRACTPS'
            'F2XM1'
            'FABS'
            'FADD'
            'FADDP'
            'FBLD'
            'FBSTP'
            'FCHS'
            'FCLEX'
            'FCMOVB'
            'FCMOVBE'
            'FCMOVE'
            'FCMOVNB'
            'FCMOVNBE'
            'FCMOVNE'
            'FCMOVNU'
            'FCMOVU'
            'FCOM'
            'FCOMI'
            'FCOMIP'
            'FCOMP'
            'FCOMPP'
            'FCOS'
            'FDECSTP'
            'FDIV'
            'FDIVP'
            'FDIVR'
            'FDIVRP'
            'FFREE'
            'FIADD'
            'FICOM'
            'FICOMP'
            'FIDIV'
            'FIDIVR'
            'FILD'
            'FIMUL'
            'FINCSTP'
            'FINIT'
            'FIST'
            'FISTP'
            'FISTTP'
            'FISUB'
            'FISUBR'
            'FISUBRP'
            'FLD'
            'FLD1'
            'FLDCW'
            'FLDENV'
            'FLDL2E'
            'FLDL2T'
            'FLDLG2'
            'FLDLN2'
            'FLDPI'
            'FLDZ'
            'FMUL'
            'FMULP'
            'FNCLEX'
            'FNINIT'
            'FNOP'
            'FNSAVE'
            'FNSTCW'
            'FNSTENV'
            'FNSTSW'
            'FPATAN'
            'FPREM'
            'FPREM1'
            'FPTAN'
            'FRNDINT'
            'FRSTOR'
            'FSAVE'
            'FSCALE'
            'FSIN'
            'FSINCOS'
            'FSQRT'
            'FST'
            'FSTCW'
            'FSTENV'
            'FSTP'
            'FSTSW'
            'FSUB'
            'FSUBP'
            'FSUBR'
            'FSUBRP'
            'FTST'
            'FUCOM'
            'FUCOMI'
            'FUCOMIP'
            'FUCOMP'
            'FUCOMPP'
            'FWAIT'
            'FXAM'
            'FXCH'
            'FXRSTOR'
            'FXSAVE'
            'FXTRACT'
            'FYL2X'
            'FYL2XP1'
            'GF2P8AFFINEINVQB'
            'GF2P8AFFINEQB'
            'GF2P8MULB'
            'HADDPD'
            'HADDPS'
            'HLT'
            'HSUBPD'
            'HSUBPS'
            'IDIV'
            'IMUL'
            'IN'
            'INC'
            'INS'
            'INSB'
            'INSD'
            'INSERTPS'
            'INSW'
            'INT1'
            'INT3'
            'INTO'
            'INVD'
            'INVLPG'
            'INVPCID'
            'IRET'
            'IRETD'
            'JA'
            'JAE'
            'JB'
            'JBE'
            'JC'
            'JCXZ'
            'JE'
            'JECXZ'
            'JG'
            'JGE'
            'JL'
            'JLE'
            'JMP'
            'JNA'
            'JNAE'
            'JNB'
            'JNBE'
            'JNC'
            'JNE'
            'JNG'
            'JNGE'
            'JNL'
            'JNLE'
            'JNO'
            'JNP'
            'JNS'
            'JNZ'
            'JO'
            'JP'
            'JPE'
            'JPO'
            'JRCXZ'
            'JS'
            'JZ'
            'KADDB'
            'KADDD'
            'KADDQ'
            'KADDW'
            'KANDB'
            'KANDD'
            'KANDNB'
            'KANDND'
            'KANDNQ'
            'KANDNW'
            'KANDQ'
            'KANDW'
            'KMOVB'
            'KMOVD'
            'KMOVQ'
            'KMOVW'
            'KNOTB'
            'KNOTD'
            'KNOTQ'
            'KNOTW'
            'KORB'
            'KORD'
            'KORQ'
            'KORTESTB'
            'KORTESTD'
            'KORTESTQ'
            'KORTESTW'
            'KORW'
            'KSHIFTLB'
            'KSHIFTLD'
            'KSHIFTLQ'
            'KSHIFTLW'
            'KSHIFTRB'
            'KSHIFTRD'
            'KSHIFTRQ'
            'KSHIFTRW'
            'KTESTB'
            'KTESTD'
            'KTESTQ'
            'KTESTW'
            'KUNPCKBW'
            'KUNPCKDQ'
            'KUNPCKWD'
            'KXNORB'
            'KXNORD'
            'KXNORQ'
            'KXNORW'
            'KXORB'
            'KXORD'
            'KXORQ'
            'KXORW'
            'LAHF'
            'LAR'
            'LCALL'
            'LDDQU'
            'LDMXCSR'
            'LDS'
            'LEA'
            'LEAVE'
            'LES'
            'LFENCE'
            'LFS'
            'LGDT'
            'LGS'
            'LIDT'
            'LLDT'
            'LMSW'
            'LOCK'
            'LODS'
            'LODSB'
            'LODSD'
            'LODSQ'
            'LODSW'
            'LOOP'
            'LOOPE'
            'LOOPNE'
            'LRET'
            'LSL'
            'LSS'
            'LTR'
            'LZCNT'
            'MASKMOVDQU'
            'MASKMOVQ'
            'MAXPD'
            'MAXPS'
            'MAXSD'
            'MAXSS'
            'MFENCE'
            'MINPD'
            'MINPS'
            'MINSD'
            'MINSS'
            'MONITOR'
            'MOV'
            'MOVAPD'
            'MOVAPS'
            'MOVBE'
            'MOVD'
            'MOVDDUP'
            'MOVDIR64B'
            'MOVDIRI'
            'MOVDQ2Q'
            'MOVDQA'
            'MOVDQU'
            'MOVHLPS'
            'MOVHPD'
            'MOVHPS'
            'MOVLHPS'
            'MOVLPD'
            'MOVLPS'
            'MOVMSKPD'
            'MOVMSKPS'
            'MOVNTDQ'
            'MOVNTDQA'
            'MOVNTI'
            'MOVNTPD'
            'MOVNTPS'
            'MOVNTQ'
            'MOVQ'
            'MOVQ2DQ'
            'MOVS'
            'MOVSB'
            'MOVSD'
            'MOVSHDUP'
            'MOVSLDUP'
            'MOVSQ'
            'MOVSS'
            'MOVSW'
            'MOVSX'
            'MOVSXD'
            'MOVUPD'
            'MOVUPS'
            'MOVW'
            'MOVZB'
            'MOVZX'
            'MPSADBW'
            'MUL'
            'MULPD'
            'MULPS'
            'MULSD'
            'MULSS'
            'MULX'
            'MWAIT'
            'NEG'
            'NEGB'
            'NEGL'
            'NEGQ'
            'NEGW'
            'NOP'
            'NOT'
            'OR'
            'ORPD'
            'ORPS'
            'OUT'
            'OUTS'
            'OUTSB'
            'OUTSD'
            'OUTSW'
            'PABSB'
            'PABSD'
            'PABSQ'
            'PABSW'
            'PACKSSDW'
            'PACKSSWB'
            'PACKUSDW'
            'PACKUSWB'
            'PADDB'
            'PADDD'
            'PADDQ'
            'PADDSB'
            'PADDSW'
            'PADDUSB'
            'PADDUSW'
            'PADDW'
            'PALIGNR'
            'PAND'
            'PANDN'
            'PAUSE'
            'PAVGB'
            'PAVGW'
            'PBLENDVB'
            'PBLENDW'
            'PCLMULQDQ'
            'PCMPEQB'
            'PCMPEQD'
            'PCMPEQQ'
            'PCMPEQW'
            'PCMPESTRI'
            'PCMPESTRM'
            'PCMPGTB'
            'PCMPGTD'
            'PCMPGTQ'
            'PCMPGTW'
            'PCMPISTRI'
            'PCMPISTRM'
            'PDEP'
            'PEXT'
            'PEXTRB'
            'PEXTRD'
            'PEXTRQ'
            'PEXTRW'
            'PHADDD'
            'PHADDSW'
            'PHADDW'
            'PHMINPOSUW'
            'PHSUBD'
            'PHSUBSW'
            'PHSUBW'
            'PINSRB'
            'PINSRD'
            'PINSRQ'
            'PINSRW'
            'PMADDUBSW'
            'PMADDWD'
            'PMAXSB'
            'PMAXSD'
            'PMAXSQ'
            'PMAXSW'
            'PMAXUB'
            'PMAXUD'
            'PMAXUQ'
            'PMAXUW'
            'PMINSB'
            'PMINSD'
            'PMINSQ'
            'PMINSW'
            'PMINUB'
            'PMINUD'
            'PMINUQ'
            'PMINUW'
            'PMOVMSKB'
            'PMOVSX'
            'PMOVZX'
            'PMULDQ'
            'PMULHRSW'
            'PMULHUW'
            'PMULHW'
            'PMULLD'
            'PMULLQ'
            'PMULLW'
            'PMULUDQ'
            'POP'
            'POPA'
            'POPAD'
            'POPCNT'
            'POPF'
            'POPFD'
            'POPFQ'
            'POR'
            'PREFETCHNTA'
            'PREFETCHT0'
            'PREFETCHT1'
            'PREFETCHT2'
            'PREFETCHW'
            'PSADBW'
            'PSHUFB'
            'PSHUFD'
            'PSHUFHW'
            'PSHUFLW'
            'PSHUFW'
            'PSIGNB'
            'PSIGND'
            'PSIGNW'
            'PSLLD'
            'PSLLDQ'
            'PSLLQ'
            'PSLLW'
            'PSRAD'
            'PSRAQ'
            'PSRAW'
            'PSRLD'
            'PSRLDQ'
            'PSRLQ'
            'PSRLW'
            'PSUBB'
            'PSUBD'
            'PSUBQ'
            'PSUBSB'
            'PSUBSW'
            'PSUBUSB'
            'PSUBUSW'
            'PSUBW'
            'PTEST'
            'PTWRITE'
            'PUNPCKHBW'
            'PUNPCKHDQ'
            'PUNPCKHQDQ'
            'PUNPCKHWD'
            'PUNPCKLBW'
            'PUNPCKLDQ'
            'PUNPCKLQDQ'
            'PUNPCKLWD'
            'PUSH'
            'PUSHA'
            'PUSHAD'
            'PUSHF'
            'PUSHFD'
            'PUSHFQ'
            'PXOR'
            'RCL'
            'RCPPS'
            'RCPSS'
            'RCR'
            'RDFSBASE'
            'RDGSBASE'
            'RDMSR'
            'RDPID'
            'RDPKRU'
            'RDPMC'
            'RDRAND'
            'RDSEED'
            'RDTSC'
            'RDTSCP'
            'REP'
            'REPE'
            'REPNE'
            'REPNZ'
            'REPZ'
            'RET'
            'ROL'
            'ROR'
            'RORX'
            'ROUNDPD'
            'ROUNDPS'
            'ROUNDSD'
            'ROUNDSS'
            'RSM'
            'RSQRTPS'
            'RSQRTSS'
            'SAHF'
            'SAL'
            'SALB'
            'SALL'
            'SALQ'
            'SALW'
            'SAR'
            'SARB'
            'SARL'
            'SARQ'
            'SARW'
            'SARX'
            'SBB'
            'SCAS'
            'SCASB'
            'SCASD'
            'SCASW'
            'SETA'
            'SETAE'
            'SETB'
            'SETBE'
            'SETC'
            'SETCC'
            'SETE'
            'SETG'
            'SETGE'
            'SETL'
            'SETLE'
            'SETNA'
            'SETNAE'
            'SETNB'
            'SETNBE'
            'SETNC'
            'SETNE'
            'SETNG'
            'SETNGE'
            'SETNL'
            'SETNLE'
            'SETNO'
            'SETNP'
            'SETNS'
            'SETNZ'
            'SETO'
            'SETP'
            'SETPE'
            'SETPO'
            'SETS'
            'SETZ'
            'SFENCE'
            'SGDT'
            'SHA1MSG1'
            'SHA1MSG2'
            'SHA1NEXTE'
            'SHA1RNDS4'
            'SHA256MSG1'
            'SHA256MSG2'
            'SHA256RNDS2'
            'SHL'
            'SHLB'
            'SHLD'
            'SHLL'
            'SHLQ'
            'SHLW'
            'SHLX'
            'SHR'
            'SHRB'
            'SHRD'
            'SHRL'
            'SHRQ'
            'SHRW'
            'SHRX'
            'SHUFPD'
            'SHUFPS'
            'SIDT'
            'SLDT'
            'SMSW'
            'SQRTPD'
            'SQRTPS'
            'SQRTSD'
            'SQRTSS'
            'STAC'
            'STC'
            'STD'
            'STI'
            'STMXCSR'
            'STOS'
            'STOSB'
            'STOSD'
            'STOSQ'
            'STOSW'
            'STR'
            'SUB'
            'SUBPD'
            'SUBPS'
            'SUBSD'
            'SUBSS'
            'SWAPGS'
            'SYSCALL'
            'SYSENTER'
            'SYSEXIT'
            'SYSRET'
            'TEST'
            'TPAUSE'
            'TZCNT'
            'UCOMISD'
            'UCOMISS'
            'UD'
            'UMONITOR'
            'UMWAIT'
            'UNPCKHPD'
            'UNPCKHPS'
            'UNPCKLPD'
            'UNPCKLPS'
            'VALIGND'
            'VALIGNQ'
            'VBLENDMPD'
            'VBLENDMPS'
            'VBROADCAST'
            'VCOMPRESSPD'
            'VCOMPRESSPS'
            'VERR'
            'VERW'
            'WAIT'
            'WBINVD'
            'WRFSBASE'
            'WRGSBASE'
            'WRMSR'
            'WRPKRU'
            'XABORT'
            'XACQUIRE'
            'XADD'
            'XBEGIN'
            'XCHG'
            'XEND'
            'XGETBV'
            'XLAT'
            'XLATB'
            'XOR'
            'XORPD'
            'XORPS'
            'XRELEASE'
            'XRSTOR'
            'XRSTORS'
            'XSAVE'
            'XSAVEC'
            'XSAVEOPT'
            'XSAVES'
            'XSETBV'
            'XTEST')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id special'
      StyleName = 'Id directives'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'align'
            'ascii'
            'asciz'
            'assume'
            'byte'
            'comment'
            'dword'
            'end'
            'endm'
            'endp'
            'ends'
            'exitm'
            'extern'
            'extrn'
            'global'
            'globl'
            'group'
            'high'
            'include'
            'label'
            'large'
            'local'
            'low'
            'macro'
            'mask'
            'name'
            'near'
            'offset'
            'page'
            'proc'
            'ptr'
            'public'
            'purge'
            'qword'
            'record'
            'section'
            'seg'
            'segcs'
            'segds'
            'seges'
            'segfs'
            'seggs'
            'segss'
            'short'
            'small'
            'space'
            'string'
            'struc'
            'this'
            'title'
            'type'
            'word')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id vars'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'db'
            'dd'
            'dl'
            'dq'
            'dt'
            'dw')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'seg'
      ConditionList = <
        item
          TokenTypes = 64
        end>
      BlockEnd = 'seg end'
      EndOfTextClose = True
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = '%sz0'
      SelfClose = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'seg end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'ends')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc'
      ConditionList = <
        item
          TagList.Strings = (
            'proc')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'proc end'
      NameFmt = 'proc %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endp')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'macro'
      ConditionList = <
        item
          TagList.Strings = (
            'macro')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'macro end'
      NameFmt = 'macro %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'macro end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endm')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'label'
      ConditionList = <
        item
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '; x86 assembly sample source'
    '# Another comment'
    '// Comment'
    '/* Comment'
    ' */'
    'CODE SEGMENT  BYTE PUBLIC'
    '    ASSUME'#9'CS:CODE'
    '    MOV AX, AABBh+20d+1010b+'
    '    MOV'#9'BYTE PTR ES:[DI], 255'
    '    JMP SHORT @AsmEnd'
    ''
    '  welcomeMsg DB '#39'Hello World'#39', 0'
    '   '
    '  labela:'
    '    _label.b:'
    '    @@:'
    '    @@name'
    '    @AsmEnd:'
    '    MOV AX, 0'
    '    RET      '
    '    '
    ''
    '  SEGMENT readable writable ; no-named segment'
    '    msg db '#39'Test'#39' '
    '    ends'
    '    '
    'test1 PROC NEAR'
    '      MOV ax,10'
    '      CALL test2'
    '      RET'
    'test1 ENDP'
    ''
    'test2 PROC FAR'
    '      ADD ax,ax'
    '      RET'
    'test2 ENDP'
    ''
    'CODE ENDS'
    '  '
    'PUSHALL MACRO'
    '       PUSH ES DI'
    #9'ENDM'
    '    '
    'END')
  TokenTypeNames.Strings = (
    'Label'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Segment')
  Extentions = 'asm'
  LexerName = 'Assembly'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey Torgashin (CudaText)'
    'OpCodes: https://www.felixcloutier.com/x86/index.html')
  LineComment = ';'
  Charset = DEFAULT_CHARSET
end
