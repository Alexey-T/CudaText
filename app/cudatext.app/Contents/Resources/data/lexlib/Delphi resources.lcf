object SyntAnalyzer5: TLibSyntAnalyzer
  Formats = <  
    item
      DisplayName = 'Identifier'
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Reserved word'
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end  
    item
      DisplayName = 'Comment'
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end  
    item
      DisplayName = 'String'
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Number'
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end  
    item
      DisplayName = 'Symbol'
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end  
    item
      DisplayName = 'Blob Data'
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
    end>
  TokenRules = <  
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\{.*?(\}|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Blob data'
      StyleName = 'Blob Data'
      BlockName = 'Blob begin'
      Expression = '[^\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '''.*?(''|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Any name'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_][\w\.]*'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'HEX'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\$[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/,\.;:\(\)=<>\+\-\{\}\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = '\#(\d+|\$[\da-f]+)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <  
    item
      DisplayName = 'Key words'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <      
        item
          TagList.Strings = (
            'end'
            'inherited'
            'inline'
            'item'
            'object'
          )
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'End'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            'end'
          )
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'Begin'
      ConditionList = <      
        item
          TagList.Strings = (
            'inherited'
            'item'
            'object'
          )
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'End'
      NameFmt = '%s0 %s-1%s-2 %s-3'
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = '%s0 %s-1%s-2 %s-3'
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'Collection begin'
      ConditionList = <      
        item
          TagList.Strings = (
            '<'
          )
          TokenTypes = 8
        end>
      BlockOffset = 2
      BlockEnd = 'Collection end'
      NameFmt = '%s2 (collection)'
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = '< %s2 >'
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'Collection end'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            '>'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'List begin'
      ConditionList = <      
        item
          TagList.Strings = (
            '('
          )
          TokenTypes = 8
        end>
      BlockOffset = 2
      BlockEnd = 'List end'
      NameFmt = '%s2 (list)'
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = '( %s2 )'
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'List end'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            ')'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'Blob begin'
      StyleName = 'Blob Data'
      ConditionList = <      
        item
          TagList.Strings = (
            '{'
          )
          TokenTypes = 8
        end>
      BlockEnd = 'Blob end'
      HighlightPos = cpBound
      DrawStaple = True
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'Blob end'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            '}'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '{ Delphi/C++ Builder Form Definitions }'
    'object TestForm: TTestForm'
    '  Left = 200'
    '  Top = 100'
    '  Caption = ''Sample source'''
    '  SampleText.Strings = ('
    '    ''Test'')'
    'end'
  )
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
  )
  Extentions = 'dfm lfm lxl lcf fmx xfm'
  LexerName = 'Delphi resources'
  Charset = DEFAULT_CHARSET
end
