keyword and
keyword del
keyword for
keyword is
keyword raise
keyword assert
keyword elif
keyword from
keyword lambda
keyword return
keyword break
keyword else
keyword global
keyword not
keyword try
keyword class
keyword except
keyword if
keyword or
keyword while
keyword continue
keyword exec
keyword import
keyword pass
keyword yield
keyword def
keyword finally
keyword in
keyword print

function __import__(name[, globals[,locals[,from list]]])  |Imports module within the given context
function abs(x)  |Returns the absolute value of the number x.
function apply(f, args[, keywords])  |Calls func/method f with arguments args and optional keywords.
function basestring()  |Abstract superclass of str and unicode; can't be called or instantiated directly, but useful in: isinstance(obj, basestring).
function bool([x])  |Converts a value to a Boolean, using the standard truth testing procedure. If x is false or omitted, returns False; otherwise returns True. bool is also a class/type, subclass of int. Class bool cannot be subclassed further. Its only instances are False and True. See also boolean operators
function buffer(object[, offset[, size]])  |Returns a Buffer from a slice of object, which must support the buffer call interface (string, array, buffer).
function callable(x)  |Returns True if x callable, else False.
function chr(i)  |Returns one-character string whose ASCII code is integer i.
function classmethod(function)  |Returns a class method for function. A class method receives the class as implicit first argument, just like an instance method receives the instance.
function cmp(x,y)  |Returns negative, 0, positive if x <, ==, > to y respectively.
function coerce(x,y)  |Returns a tuple of the two numeric arguments converted to a common type.
function compile(string, filename, kind[, flags[, dont_inherit]])  |Compiles string into a code object. filename is used in error message, can be any string. It is usually the file from which the code was read, or e.g. '<string>' if not read from file. kind can be 'eval' if string is a single stmt, or 'single' which prints the output of expression statements that evaluate to something else than None, or be 'exec'. New args flags and dont_inherit concern future statements.
function complex(real[, image])  |Creates a complex object (can also be done using J or j suffix, e.g. 1+3J).
function delattr(obj, name)  |Deletes the attribute named name of object obj <=> del obj.name
function dict([mapping-or-sequence])  |Returns a new dictionary initialized from the optional argument (or an empty dictionary if no argument). Argument may be a sequence (or anything iterable) of pairs (key,value).
function dir([object])  |Without args, returns the list of names in the current local symbol table. With a module, class or class instance object as arg, returns the list of names in its attr. dictionary.
function divmod(a,b)  |Returns tuple (a/b, a%b)
function enumerate(iterable)  |Iterator returning pairs (index, value) of iterable, e.g. List(enumerate('Py')) -> [(0, 'P'), (1, 'y')].
function eval(s[, globals[, locals]])  |Evaluates string s, representing a single python expression, in (optional) globals, locals contexts. s must have no NUL's or newlines. s can also be a code object. locals can be any mapping type, not only a regular Python dict.
function execfile(file[, globals[,locals]])  |Executes a file without creating a new module, unlike import. locals can be any mapping type, not only a regular Python dict.
function file(filename[,mode[,bufsize]])  |Opens a file and returns a new file object. Alias for open.
function filter(function,sequence)  |Constructs a list from those elements of sequence for which function returns true. function takes one parameter.
function float(x)  |Converts a number or a string to floating point.
function frozenset([iterable])  |Returns a frozenset (immutable set) object whose (immutable) elements are taken from iterable, or empty by default. See also Sets.
function getattr(object,name[,default]))  |Gets attribute called name from object, e.g. getattr(x, 'f') <=> x.f). If not found, raises AttributeError or returns default if specified.
function globals()  |Returns a dictionary containing the current global variables.
function hasattr(object, name)  |Returns true if object has an attribute called name.
function hash(object)  |Returns the hash value of the object (if it has one).
function help([object])  |Invokes the built-in help system. No argument -> interactive help; if object is a string (name of a module, function, class, method, keyword, or documentation topic), a help page is printed on the console; otherwise a help page on object is generated.
function hex(x)  |Converts a number x to a hexadecimal string.
function id(object)  |Returns a unique integer identifier for object.
function input([prompt])  |Prints prompt if given. Reads input and evaluates it. Uses line editing / history if module readline available.
function int(x[, base])  |Converts a number or a string to a plain integer. Optional base parameter specifies base from which to convert string values.
function intern(aString)  |Enters aString in the table of interned strings and returns the string.
function isinstance(obj, classInfo)  |Returns true if obj is an instance of class classInfo or an object of type classInfo (classInfo may also be a tuple of classes or types). If issubclass(A,B) then isinstance(x,A) => isinstance(x,B)
function issubclass(class1, class2)  |Returns true if class1 is derived from class2 (or if class1 is class2).
function iter(obj[,sentinel])  |Returns an iterator on obj. If sentinel is absent, obj must be a collection implementing either __iter__() or __getitem__(). If sentinel is given, obj will be called with no arg; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned. See Iterators.
function len(obj)  |Returns the length (the number of items) of an object (sequence, dictionary, or instance of class implementing __len__).
function list([seq])  |Creates an empty list or a list with same elements as seq. seq may be a sequence, a container that supports iteration, or an iterator object. If seq is already a list, returns a copy of it.
function locals()  |Returns a dictionary containing current local variables.
function long(x[, base])  |Converts a number or a string to a long integer. Optional base parameter specifies the base from which to convert string values.
function map(function, sequence[, sequence, ...])  |Returns a list of the results of applying function to each item from sequence(s). If more than one sequence is given, the function is called with an argument list consisting of the corresponding item of each sequence, substituting None for missing values when not all sequences have the same length. If function is None, returns a list of the items of the sequence (or a list of tuples if more than one sequence). => You might also consider using list comprehensions instead of map().
function max(seq)
function max(v1, v2 ...)  |With a single argument seq, returns the largest item of a non-empty sequence (such as a string, tuple or list). With more than one argument, returns the largest of the arguments.
function min(seq)
function min(v1, v2 ...)  |With a single argument seq, returns the smallest item of a non-empty sequence (such as a string, tuple or list). With more than one argument, returns the smallest of the arguments.
function object()  |Returns a new featureless object. object is the base class for all new style classes, its methods are common to all instances of new style classes.
function oct(x)  |Converts a number to an octal string.
function open(filename [, mode='r', [bufsize]])  |Returns a new file object. See also alias file(). Use codecs.open() instead to open an encoded file and provide transparent encoding / decoding.
function ord(c)  |Returns integer ASCII value of c (a string of len 1). Works with Unicode char.
function pow(x, y [, z])  |Returns x to power y [modulo z]. See also ** operator.
function property([fget[, fset[, fdel[, doc]]]])  |Returns a property attribute for new-style classes (classes deriving from object). fget, fset, and fdel are functions to get the property value, set the property value, and delete the property, respectively. Typical use:
function range([start,] end [, step])  |Returns list of ints from >= start and < end.
function raw_input([prompt])  |Prints prompt if given, then reads string from std input (no trailing \n). See also input().
function reduce(f, list [, init])  |Applies the binary function f to the items of list so as to reduce the list to a single value. If init is given, it is "prepended" to list.
function reload(module)  |Re-parses and re-initializes an already imported module. Useful in interactive mode, if you want to reload a module after fixing it. If module was syntactically correct but had an error in initialization, must import it one more time before calling reload().
function repr(object)  |Returns a string containing a printable and if possible evaluable representation of an object. <=> `object` (using backquotes). Class redefinable (__repr__). See also str()
function round(x, n=0)  |Returns the floating point value x rounded to n digits after the decimal point.
function set([iterable])  |Returns a set object whose elements are taken from iterable, or empty by default. See also Sets.
function setattr(object, name, value)  |This is the counterpart of getattr().setattr(o, 'foobar', 3) <=> o.foobar = 3. Creates attribute if it doesn't exist!
function slice([start,] stop[, step])  |Returns a slice object representing a range, with R/O attributes: start, stop, step.
function sorted(iterable[, cmp[, key[, reverse]]])  |Returns a new sorted list from the items in iterable. This contrasts with list.sort() that sorts lists in place and doesn't apply to immutable sequences like strings or tuples. See sequences.sort method.
function staticmethod(function)  |Returns a static method for function. A static method does not receive an implicit first argument. To declare a static method, use this idiom:
function str(object)  |Returns a string containing a nicely printable representation of an object. Class overridable (__str__). See also repr().
function sum(iterable[, start=0])  |Returns the sum of a sequence of numbers (not strings), plus the value of parameter. Returns start when the sequence is empty.
function super( type[, object-or-type])  |Returns the superclass of type. If the second argument is omitted the super object returned is unbound. If the second argument is an object, isinstance(obj, type) must be true. If the second argument is a type, issubclass(type2, type) must be true. Typical use:
function tuple([seq])  |Creates an empty tuple or a tuple with same elements as seq. seq may be a sequence, a container that supports iteration, or an iterator object. If seq is already a tuple, returns itself (not a copy).
function type(obj)  |Returns a type object [see module types] representing the type of obj. Example: import types if type(x) == types.StringType: print 'It is a string'. NB: it is better to use instead: if isinstance(x, types.StringType)...
function unichr(code)  |Returns a unicode string 1 char long with given code.
function unicode(string[, encoding[,error]]])  |Creates a Unicode string from a 8-bit string, using the given encoding name and error treatment ('strict', 'ignore',or 'replace'}. For objects which provide a __unicode__() method, it will call this method without arguments to create a Unicode string.
function vars([object])  |Without arguments, returns a dictionary corresponding to the current local symbol table. With a module, class or class instance object as argument, returns a dictionary corresponding to the object's symbol table. Useful with the "%" string formatting operator.
function xrange(start [, end [, step]])  |Like range(), but doesn't actually store entire list all at once. Good to use in "for" loops when there is a big range and little memory.
function zip(seq1[, seq2,...])
