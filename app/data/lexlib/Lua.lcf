object SyntAnal13: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id reserved'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id standard'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id operator'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String2'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Hilite BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clMoneyGreen
      FormatType = ftBackGround
    end>
  TokenRules = <
    item
      DisplayName = 'CommLongBracket'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)-- \[\[ .*? (\]\] | \Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'CommLongBracket2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)-- \[(=+)\[ .*? (\]\1\] | \Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comm'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*$'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'StrLongBracket'
      StyleName = 'String2'
      TokenType = 4
      Expression = '(?s)\[\[ .*? (\]\] | \Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'StrLongBracket2'
      StyleName = 'String2'
      TokenType = 4
      Expression = '(?s)\[(=+)\[ .*? (\]\1\] | \Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Str'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39')(\\\\|\\"|\\'#39'|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      TokenType = 6
      Expression = '(?<=goto\x20+)\w+ | ::\w+::'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-zA-Z_][\w\d]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'NumFloat'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\. | (\.\d+|\d+\.?\d*) (e[\+\-]?\d+)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\+\-/\*\<>\.,~!&\|;:=%\^\#]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'NumHex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x\h+\.\h+\b | 0x\h+\b\.?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'NumInt'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id reserved'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'break'
            'do'
            'else'
            'elseif'
            'end'
            'false'
            'for'
            'function'
            'if'
            'in'
            'local'
            'nil'
            'not'
            'or'
            'repeat'
            'return'
            'then'
            'true'
            'until'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id std'
      StyleName = 'Id standard'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '_ALERT'
            '_ERRORMESSAGE'
            '_G'
            '_INPUT'
            '_OUTPUT'
            '_PROMPT'
            '_STDERR'
            '_STDIN'
            '_STDOUT'
            '_VERSION'
            'abs'
            'acos'
            'appendto'
            'asin'
            'assert'
            'atan'
            'atan2'
            'call'
            'ceil'
            'clock'
            'closefile'
            'collectgarbage'
            'coroutine'
            'cos'
            'date'
            'debug'
            'deg'
            'difftime'
            'dofile'
            'dostring'
            'error'
            'execute'
            'exit'
            'exp'
            'floor'
            'flush'
            'foreach'
            'foreachi'
            'format'
            'frexp'
            'gcinfo'
            'getenv'
            'getfenv'
            'getmetatable'
            'getn'
            'globals'
            'gsub'
            'io'
            'ipairs'
            'ldexp'
            'load'
            'loadfile'
            'loadlib'
            'loadstring'
            'log'
            'log10'
            'math'
            'max'
            'min'
            'mod'
            'newtype'
            'next'
            'openfile'
            'os'
            'package'
            'pairs'
            'pcall'
            'print'
            'rad'
            'random'
            'randomseed'
            'rawegal'
            'rawequal'
            'rawget'
            'rawlen'
            'rawset'
            'read'
            'readfrom'
            'remove'
            'rename'
            'require'
            'seek'
            'select'
            'setfenv'
            'setlocale'
            'setmetatable'
            'sin'
            'sort'
            'sqrt'
            'strbyte'
            'strchar'
            'strfind'
            'string'
            'strlen'
            'strlower'
            'strrep'
            'strsub'
            'strupper'
            'table'
            'tan'
            'time'
            'tinsert'
            'tmpfile'
            'tmpname'
            'tonumber'
            'tostring'
            'tremove'
            'type'
            'unpack'
            'utf8'
            'write'
            'writeto'
            'xpcall')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id operator'
      StyleName = 'Id operator'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__add'
            '__band'
            '__bnot'
            '__bor'
            '__bxor'
            '__call'
            '__concat'
            '__div'
            '__eq'
            '__gc'
            '__idiv'
            '__index'
            '__ipairs'
            '__le'
            '__len'
            '__lt'
            '__metatable'
            '__mod'
            '__mode'
            '__mul'
            '__newindex'
            '__pairs'
            '__pow'
            '__shl'
            '__shr'
            '__sub'
            '__tostring'
            '__unm')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      StyleName = 'Hilite BG'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      NameFmt = '%s-1'
      RefToCondEnd = True
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func in class'
      StyleName = 'Hilite BG'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':'
            '.')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      NameFmt = '%s-3'
      GroupFmt = '%s-1'
      RefToCondEnd = True
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      TreeGroupImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func in class 2'
      StyleName = 'Hilite BG'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':'
            '.')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':'
            '.')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      NameFmt = '%s-3%s-4%s-5'
      GroupFmt = '%s-1'
      RefToCondEnd = True
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      TreeGroupImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func anon'
      StyleName = 'Hilite BG'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      DisplayInTree = False
      RefToCondEnd = True
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'begin'
      StyleName = 'Hilite BG'
      ConditionList = <
        item
          TagList.Strings = (
            'do'
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'repeat'
      StyleName = 'Hilite BG'
      ConditionList = <
        item
          TagList.Strings = (
            'repeat')
          TokenTypes = 4
        end>
      BlockEnd = 'until'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'until'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'until')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '--Str'
    '--test'
    ' s = '#39'ww\'#39'ww'#39', "ww\"ww", '#39'alo\n123"'#39
    ' a = [[alo'
    '  123]] test'
    ' a = [==['
    '  alo'
    '  123]==] test'
    ''
    ' n = 2 + 2.22 + 22.22e-2 + 0.22E1 + 0xF0 + .5 + 5.  '
    ' ::name:: , goto name'
    ''
    'function Test.mt.__lt (a,b)'
    '  return a <= b'
    'end'
    ''
    'function Test:app (a, n)'
    '  if n == 0 then'
    '    coroutine.yield(a)'
    '  else'
    '    for i=1,n do'
    '      a[n], a[i] = a[i], a[n]'
    '    end'
    '  end'
    'end'
    ''
    'function tst(a)'
    '  local n = table.getn(a)'
    '  return coroutine.wrap(function () permgen(a, n) end)'
    'end'
    ''
    'function printResult (a)'
    '  for i,v in ipairs(a) do'
    '    io.write(v, " ")'
    '  end'
    '  io.write("\n")'
    'end'
    ''
    'repeat'
    '  print "aa"'
    'until true ')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Label'
    'Symbol ()'
    '-'
    'Preprocessor'
    'Func name')
  Extentions = 'lua'
  LexerName = 'Lua'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Ref: http://www.lua.org/manual/5.1/manual.html')
  LineComment = '--'
  Charset = DEFAULT_CHARSET
end
