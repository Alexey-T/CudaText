object SyntAnal9: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String regex'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id standard'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 12615808
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'PHP tag'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id func name'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'HTML tag name'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id upcase const'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Sublexer BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clSkyBlue
      FormatType = ftBackGround
    end>
  TokenRules = <
    item
      DisplayName = 'Comment empty'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '/\*{2,}/'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc begin'
      StyleName = 'Comment doc'
      StatesAdd = 1
      StatesAbsent = 1
      TokenType = 1
      Expression = '/\*{2,}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc end'
      StyleName = 'Comment doc'
      StatesRemove = 1
      StatesPresent = 1
      TokenType = 1
      Expression = '\*/'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*? (?=</script>) |'#13#10'//.* '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment shebang'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?<=^[\x20]*) \#!.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\\|\\\1|\\\z|.)*? (\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String Regex'
      StyleName = 'String regex'
      TokenType = 4
      Expression = 
        '(?-i)(?<=[=\(\[&!:/>\?\+,\}`\|]\x20*) / (\\/|\\\\|\[.+?\]|.)*? /' +
        '[gimysu]* |'#13#10'(?-i)(?<=^\x20*)                / (\\/|\\\\|\[.+?\]' +
        '|.)*? /[gimysu]* |'#13#10'(?-i)(?<=\bcase\x20*)           / (\\/|\\\\|' +
        '\[.+?\]|.)*? /[gimysu]* |'#13#10'(?-i)(?<=\breturn\x20*)         / (\\' +
        '/|\\\\|\[.+?\]|.)*? /[gimysu]* |'#13#10'(?-i)(?<=\bawait\x20*)        ' +
        '  / (\\/|\\\\|\[.+?\]|.)*? /[gimysu]* |'#13#10'(?-i)(?<=\binstanceof\x' +
        '20*)     / (\\/|\\\\|\[.+?\]|.)*? /[gimysu]* |'#13#10'(?-i)(?<=\bgoto\' +
        'x20*)           / (\\/|\\\\|\[.+?\]|.)*? /[gimysu]* |'#13#10'(?-i)(?<=' +
        '\bin\x20*)             / (\\/|\\\\|\[.+?\]|.)*? /[gimysu]* |'#13#10'(?' +
        '-i)(?<=\bof\x20*)             / (\\/|\\\\|\[.+?\]|.)*? /[gimysu]' +
        '*'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String Heredoc'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) <r><!\[CDATA\[ .+? (\]\]></r> | \Z) '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id func name'
      StyleName = 'Id func name'
      TokenType = 2
      Expression = 
        '(?r)(?<=\bfunction\*?\x20+)[\$\w\x{200C}\x{200D}]+ | (?<=\bclass' +
        '\x20+)[\$\w\x{200C}\x{200D}]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'HTML tag name'
      StyleName = 'HTML tag name'
      TokenType = 2
      Expression = '(?<=</?)\w+(?=[\x20/>\n])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tick template tag'
      StyleName = 'PHP tag'
      Expression = '`|[a-z]\w*`'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id upcase const'
      StyleName = 'Id upcase const'
      TokenType = 2
      Expression = '(?-i)[A-Z_\$][A-Z0-9_\$]*[A-Z][A-Z0-9_\$]* (?=[^\w\(])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id after .'
      StyleName = 'Id'
      TokenType = 9
      Expression = '(?<=\.)[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_\$][\w\$]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[0-9a-f_]+n?\b | 0b[01_]+n?\b | 0o[0-7_]+n?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d_]*(\.[\d_]*)?e[\+\-]? \d[\d_]*\b|'#13#10'\d[\d_]*\.[\d_]+\b|'#13#10'\d' +
        '[\d_]*\.|'#13#10'\.\d[\d_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*n?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'PHP tag'
      StyleName = 'PHP tag'
      TokenType = 6
      Expression = '<\?php|<\?|\?>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol { }'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ( )'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '[\[\],;:\?/~%\#@]|\.+|'#13#10'=>|<>|\+\+|\-\-|\|\||&&|\?\?|\?\.|'#13#10'[!\-' +
        '\+\*/=<>&\|\^]=*'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Escaped char'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '\\.'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'as'
            'async'
            'await'
            'boolean'
            'break'
            'byte'
            'case'
            'catch'
            'char'
            'class'
            'const'
            'continue'
            'debugger'
            'delete'
            'do'
            'double'
            'else'
            'enum'
            'eval'
            'export'
            'extends'
            'final'
            'finally'
            'float'
            'for'
            'from'
            'function'
            'if'
            'implements'
            'import'
            'in'
            'instanceof'
            'int'
            'interface'
            'let'
            'long'
            'native'
            'new'
            'of'
            'package'
            'return'
            'short'
            'switch'
            'synchronized'
            'throw'
            'throws'
            'transient'
            'try'
            'typeof'
            'var'
            'void'
            'volatile'
            'while'
            'with'
            'yield')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id standard'
      StyleName = 'Id standard'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '$export'
            '__dirname'
            '__filename'
            'AggregateError'
            'Array'
            'ArrayBuffer'
            'Atomics'
            'Boolean'
            'constructor'
            'DataView'
            'Date'
            'Error'
            'EvalError'
            'exports'
            'Float32Array'
            'Float64Array'
            'Function'
            'Generator'
            'GeneratorFunction'
            'get'
            'global'
            'hasOwnProperty'
            'Int16Array'
            'Int32Array'
            'Int8Array'
            'InternalError'
            'Intl'
            'isFinite'
            'isNaN'
            'isPrototypeOf'
            'JSON'
            'length'
            'Map'
            'Math'
            'module'
            'name'
            'Number'
            'Object'
            'process'
            'prototype'
            'Proxy'
            'RangeError'
            'ReferenceError'
            'Reflect'
            'RegExp'
            'require'
            'set'
            'Set'
            'SharedArrayBuffer'
            'SIMD'
            'String'
            'Symbol'
            'SyntaxError'
            'toString'
            'TypeError'
            'Uint16Array'
            'Uint32Array'
            'Uint8Array'
            'Uint8ClampedArray'
            'URIError'
            'valueOf'
            'WeakMap'
            'WeakSet')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id const'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'arguments'
            'default'
            'false'
            'frames'
            'globalThis'
            'Infinity'
            'NaN'
            'null'
            'self'
            'super'
            'this'
            'true'
            'undefined'
            'window')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id modifier'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'accessor'
            'declare'
            'override'
            'private'
            'protected'
            'public'
            'readonly'
            'static')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for/if'
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TagList.Strings = (
            'for'
            'if')
          TokenTypes = 4
        end>
      NotCollapsed = True
      DisplayInTree = False
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function id=>id'
      ConditionList = <
        item
          TokenTypes = 36
        end
        item
          TagList.Strings = (
            '=>')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      NameFmt = 'func <arrow>'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'func <arrow>'
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function id=>{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          TagList.Strings = (
            '=>')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'func <arrow>'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = 'func <arrow>'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function ( )=>id'
      ConditionList = <
        item
          TokenTypes = 36
        end
        item
          TagList.Strings = (
            '=>')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 136
        end
        item
          CondType = tcSkip
          TokenTypes = 318
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end>
      NameFmt = 'func <arrow>'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'func <arrow>'
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function ( )=>{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          TagList.Strings = (
            '=>')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 318
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end>
      BlockEnd = '}'
      NameFmt = 'func <arrow>'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = 'func <arrow>'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function prefix name'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'func %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = 'func %s0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function anonym'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'func <anon>'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = 'func <anon>'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '*')
          CondType = tcSkip
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      NameFmt = 'func %s-1~s[)]'
      RefToCondEnd = True
      HighlightPos = cpBound
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = 'func %s-1~s[)]'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 256
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class anon'
      ConditionList = <
        item
          TagList.Strings = (
            'extends')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      NameFmt = '%s0 <anon>'
      HighlightPos = cpAny
      CancelNextRules = True
      NoEndRule = True
      TreeItemImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = '['
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end>
      BlockEnd = ']'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '[ ... ]'
      IgnoreAsParent = False
    end
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 128
        end>
      BlockEnd = ')'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '( ... )'
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 128
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <
    item
      DisplayName = 'PHP'
      StartExpression = '<\?(php)?'
      EndExpression = '\?>'
    end
    item
      DisplayName = 'JSDoc'
      StatesAdd = 1
      StatesRemove = 1
      StartExpression = '/\*{2,}(?!/)'
      EndExpression = '\*/'
      SyntAnalyzer = SyntAnal10
    end
    item
      DisplayName = 'Template HTML'
      StyleName = 'Sublexer BG'
      StartExpression = '(?-i)\bhtml`'
      EndExpression = '`'
      SyntAnalyzer = SyntAnal8
    end
    item
      DisplayName = 'Template JSON'
      StyleName = 'Sublexer BG'
      StartExpression = '(?-i)\bjson`'
      EndExpression = '`'
      SyntAnalyzer = SyntAnal11
    end
    item
      DisplayName = 'Template CSS'
      StyleName = 'Sublexer BG'
      StartExpression = '(?-i)\bcss`'
      EndExpression = '`'
      SyntAnalyzer = SyntAnal6
    end>
  SampleText.Strings = (
    '#!/bin/bash                         '
    '//Comment'
    '/** @param {string} some[].name - Name.'
    '*/'
    'n = 12_34_5n+ 1.2+ 1.+ 1.2e+3+ 1.e-3+ '
    '  +0xFF_AAn+ 0b11_00n+ 0o77_11n'
    'AB + AB$_AB+ _AB + $$AB_AB$ + NOTconst + NOT_CONST() '
    '   '
    '<?php echo '#39'test'#39' ?>'
    'var test = NaN + Object + $ + offset;'
    'var s_regex = /^<\/?\w.*?>/gi;'
    '    s_not_regex = 1 / 2 + (0xFF+10) / 3 + false-true;'
    '    s_template = css` br { background: #a00; }`;'
    '    s_mulline = " \'
    '      <div class='#39'"+some+"'#39'> \'
    '      <td width='#39'200'#39'> \'
    '      "+some+'#39'"...'#39';'
    '    '
    'class MyClass {'
    '}'
    ''
    'function funcMenu() {'
    '  addMenuItem('#39'Txt'#39', '#39'Ctrl+\'#39#39');'
    '  addMenuItem('#39'Txt3'#39', '#39'Ctrl+Alt+;'#39');'
    '}'
    ''
    'anon_func1: function(inc, offset) {'
    '  return -1'
    '}'
    'anon_func2 = (v, x) => { return x };'
    '    '
    'function funcWork() {'
    '  $('#39'#name'#39').html('#39#39');'
    '  for (id in ids) {'
    '    if (ids[id].q>0) {'
    '      $.cookie('#39'some'#39', $.toJSON(someth), {path: '#39'/'#39'});'
    '    } else {'
    '      delete ids[id];'
    '    }'
    '  }'
    '}'
    ''
    'function css_in_js() {'
    '  return ('
    
      '    <JssProvider jss={jss} generateClassName={generateClassName}' +
      '>'
    '      ...'
    '    </JssProvider>'
    '  );'
    '  return <div className={this.props.classes.root} />;'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'PHP tag'
    'Symbol ( )'
    'Symbol { }'
    'Id after.')
  Extentions = 'js htc es6 pjs mjs'
  LexerName = 'JavaScript'
  Notes.Strings = (
    'It was based on lexer from EControl'
    'Reworked by Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
