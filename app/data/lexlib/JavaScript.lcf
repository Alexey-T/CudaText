object SyntAnal38: TLibSyntAnalyzer
  Formats = <  
    item
      DisplayName = 'Symbol'
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end  
    item
      DisplayName = 'Number'
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end  
    item
      DisplayName = 'String'
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'String regex'
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Identifier'
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Id keyword'
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Id standard'
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Id jquery'
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
    end  
    item
      DisplayName = 'Comment'
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end  
    item
      DisplayName = 'Comment doc'
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end  
    item
      DisplayName = 'Current block'
      Font.CharSet = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftBackGround
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end>
  TokenRules = <  
    item
      DisplayName = 'Comment doc'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s)/\*\* .*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*? (?=<[/\w]) | //.*'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)("|'') (\\\\|\\\1|.)*? (\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'String Regex'
      StyleName = 'String regex'
      TokenType = 4
      Expression = '(?<=[=\(&!]\s*) / (\\/|\\\\|.)*? (/[gim]*|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'String Heredoc'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) <r><!\[CDATA\[ .+? (\]\]></r> | \Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Id'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_\$]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ (\.\d+)? e [\+\-]? \d+ | \d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\.\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end  
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^~!%]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <  
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <      
        item
          TagList.Strings = (
            'abstract'
            'arguments'
            'await'
            'boolean'
            'break'
            'byte'
            'case'
            'catch'
            'char'
            'class'
            'const'
            'continue'
            'debugger'
            'default'
            'delete'
            'do'
            'double'
            'else'
            'enum'
            'eval'
            'export'
            'extends'
            'false'
            'final'
            'finally'
            'float'
            'for'
            'function'
            'goto'
            'if'
            'implements'
            'import'
            'in'
            'instanceof'
            'int'
            'interface'
            'let'
            'long'
            'native'
            'new'
            'null'
            'package'
            'private'
            'protected'
            'public'
            'return'
            'short'
            'static'
            'super'
            'switch'
            'synchronized'
            'this'
            'throw'
            'throws'
            'transient'
            'true'
            'try'
            'typeof'
            'var'
            'void'
            'volatile'
            'while'
            'with'
            'yield'
          )
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'id standard'
      StyleName = 'Id standard'
      BlockType = btTagDetect
      ConditionList = <      
        item
          TagList.Strings = (
            'Array'
            'Date'
            'hasOwnProperty'
            'Infinity'
            'isFinite'
            'isNaN'
            'isPrototypeOf'
            'length'
            'Math'
            'name'
            'NaN'
            'Number'
            'Object'
            'prototype'
            'String'
            'toString'
            'undefined'
            'valueOf'
          )
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'id jquery'
      StyleName = 'Id jquery'
      BlockType = btTagDetect
      ConditionList = <      
        item
          TagList.Strings = (
            '$'
            'add'
            'addBack'
            'addClass'
            'after'
            'ajax'
            'ajaxComplete'
            'ajaxError'
            'ajaxPrefilter'
            'ajaxSend'
            'ajaxSetup'
            'ajaxStart'
            'ajaxStop'
            'ajaxSuccess'
            'ajaxTransport'
            'altKey'
            'always'
            'andSelf'
            'animate'
            'animated'
            'append'
            'appendTo'
            'attr'
            'before'
            'bind'
            'blur'
            'bottom'
            'boxModel'
            'browser'
            'button'
            'callbacks'
            'cancelBubble'
            'change'
            'checkbox'
            'checked'
            'children'
            'clearQueue'
            'click'
            'clone'
            'closest'
            'contains'
            'contents'
            'context'
            'core'
            'css'
            'cssHooks'
            'cssNumber'
            'ctrlKey'
            'currentTarget'
            'data'
            'dblclick'
            'deferred'
            'delay'
            'delegate'
            'delegateTarget'
            'dequeue'
            'detach'
            'die'
            'disable'
            'disabled'
            'done'
            'each'
            'empty'
            'enabled'
            'end'
            'eq'
            'error'
            'even'
            'event'
            'extend'
            'fadeIn'
            'fadeOut'
            'fadeTo'
            'fadeToggle'
            'fail'
            'file'
            'filter'
            'find'
            'finish'
            'fire'
            'fired'
            'fireWith'
            'first'
            'first-child'
            'first-of-type'
            'fn'
            'focus'
            'focusin'
            'focusout'
            'fx'
            'get'
            'getJSON'
            'getScript'
            'globalEval'
            'grep'
            'gt'
            'has'
            'hasClass'
            'hasData'
            'header'
            'height'
            'hidden'
            'hide'
            'holdReady'
            'hover'
            'html'
            'image'
            'inArray'
            'index'
            'init'
            'innerHeight'
            'innerWidth'
            'input'
            'insertAfter'
            'insertBefore'
            'interval'
            'is'
            'isArray'
            'isDefaultPrevented'
            'isEmptyObject'
            'isFunction'
            'isImmediatePropagationStopped'
            'isNumeric'
            'isPlainObject'
            'isPropagationStopped'
            'isRejected'
            'isResolved'
            'isWindow'
            'isXMLDoc'
            'jquery'
            'keyCode'
            'keydown'
            'keypress'
            'keyup'
            'lang'
            'last'
            'last-child'
            'last-of-type'
            'length'
            'live'
            'load'
            'lock'
            'locked'
            'lt'
            'makeArray'
            'map'
            'merge'
            'metaKey'
            'mousedown'
            'mouseenter'
            'mouseleave'
            'mousemove'
            'mouseout'
            'mouseover'
            'mouseup'
            'namespace'
            'next'
            'nextAll'
            'nextUntil'
            'noConflict'
            'noop'
            'not'
            'notify'
            'notifyWith'
            'now'
            'nth-child'
            'nth-child-last'
            'nth-first-of-type'
            'nth-last-child'
            'nth-last-of-type'
            'nth-of-type'
            'obj'
            'odd'
            'off'
            'offset'
            'offsetParent'
            'on'
            'one'
            'only-child'
            'only-of-type'
            'outerHeight'
            'outerWidth'
            'pageX'
            'pageY'
            'param'
            'parent'
            'parents'
            'parentsUntil'
            'parseHTML'
            'parseInt'
            'parseJSON'
            'parseXML'
            'password'
            'pipe'
            'position'
            'post'
            'prepend'
            'prependTo'
            'prev'
            'prevAll'
            'preventDefault'
            'prevUntil'
            'progress'
            'promise'
            'prop'
            'proxy'
            'pushStack'
            'queue'
            'radio'
            'ready'
            'reject'
            'rejectWith'
            'relatedTarget'
            'remove'
            'removeAttr'
            'removeClass'
            'removeData'
            'removeProp'
            'replaceAll'
            'replaceWith'
            'reset'
            'resize'
            'resolve'
            'resolved'
            'resolveWith'
            'result'
            'root'
            'scroll'
            'scrollLeft'
            'scrollTop'
            'select'
            'selected'
            'selector'
            'self'
            'serialize'
            'serializeArray'
            'setTimeout'
            'shiftKey'
            'show'
            'siblings'
            'size'
            'slice'
            'slideDown'
            'slideToggle'
            'slideUp'
            'state'
            'stop'
            'stopImmediatePropagation'
            'stopPropagation'
            'sub'
            'submit'
            'support'
            'target'
            'text'
            'then'
            'timeStamp'
            'toArray'
            'toggle'
            'toggleClass'
            'top'
            'trigger'
            'triggerHandler'
            'trim'
            'type'
            'unbind'
            'undelegate'
            'unique'
            'unload'
            'unwrap'
            'val'
            'visible'
            'when'
            'which'
            'width'
            'window'
            'wrap'
            'wrapAll'
            'wrapInner'
          )
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'for/if'
      ConditionList = <      
        item
          TagList.Strings = (
            ')'
          )
          TokenTypes = 8
        end      
        item
          CondType = tcSkip
        end      
        item
          TagList.Strings = (
            '('
          )
          TokenTypes = 8
        end      
        item
          TagList.Strings = (
            'for'
            'if'
          )
          TokenTypes = 4
        end>
      NotCollapsed = True
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end  
    item
      DisplayName = '{'
      StyleName = 'Current block'
      ConditionList = <      
        item
          TagList.Strings = (
            '{'
          )
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DrawStaple = True
      IgnoreAsParent = False
    end  
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            '}'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'name: function'
      ConditionList = <      
        item
          TagList.Strings = (
            'function'
          )
          TokenTypes = 4
        end      
        item
          TagList.Strings = (
            ':'
          )
          TokenTypes = 8
        end      
        item
          TokenTypes = 4
        end>
      NameFmt = 'function %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'function %s0'
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'function'
      ConditionList = <      
        item
          TagList.Strings = (
            'function'
          )
          TokenTypes = 4
        end>
      BlockEnd = 'function end'
      EndOfTextClose = True
      NameFmt = '%s0~s[)]'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%s0~s[)]'
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'function end'
      BlockName = 'function'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            '}'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = '('
      StyleName = 'Current block'
      ConditionList = <      
        item
          TagList.Strings = (
            '('
          )
          TokenTypes = 8
        end>
      BlockEnd = ')'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end  
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            ')'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = '['
      StyleName = 'Current block'
      ConditionList = <      
        item
          TagList.Strings = (
            '['
          )
          TokenTypes = 8
        end>
      BlockEnd = ']'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end  
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <      
        item
          TagList.Strings = (
            ']'
          )
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'var'
      ConditionList = <      
        item
          TokenTypes = 4
        end      
        item
          TagList.Strings = (
            'var'
          )
          TokenTypes = 4
        end>
      NotCollapsed = True
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end  
    item
      DisplayName = 'class'
      ConditionList = <      
        item
          TokenTypes = 4
        end      
        item
          TagList.Strings = (
            'class'
          )
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Text'
    'NaN Object $ offset'
    '/** DocBlock '
    '*/   /* Comment */'
    'class MyClass {'
    '}'
    ''
    'function init() {'
    #9'addMenuItem(''Txt'', ''Ctrl+\'''');'
    #9'addMenuItem(''Txt3'', ''Ctrl+Alt+;'');'
    '}'
    ''
    'var s_regex = /^<\/?\w.*?>/gi;'
    '    not_regex = 1 / 2 + (0xFF+10) / 3;'
    '    '
    'findNewEditPoint: function(inc, offset) {'
    #9'return -1'
    '}'
    '    '
    'function SetEnabled(A,count)'
    '{'
    '  for(i= 0; i< count;i++)'
    '    A(i).Enabled = !A(i).Enabled;'
    '}'
    ''
    'function render(){'
    #9#9'$(''#basket'').html('''');'
    #9#9'for (id in basket){'
    #9#9#9'if(basket[id].q>0){'
    #9#9#9#9'b=b+" \'
    #9#9#9#9#9'<div class=''"+cl+"''> \'
    #9#9#9#9#9#9'<td width=''166'' valign=''top''> \'
    #9#9#9#9#9#9#9'"+goods.n+''"...'';'
    ''
    #9#9#9#9'$.cookie(''basketForPHP4'', $.toJSON(basketForPHP4),{path: ''/''});'
    #9#9#9'} else{'
    #9#9#9#9'delete basket[id];'
    #9#9#9'}'
    #9#9'}'
    '}'
  )
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
  )
  Extentions = 'js'
  LexerName = 'JavaScript'
  Notes.Strings = (
    'Reworked by Alexey (Synwrite)'
    '-tree: added if/for/var'
    '-tree: func params shown'
    '-strings oneline ''...'''
    '-strings multiline "..."'
    '-strings regex /.../gi'
    '-strings heredoc'
    '-doc comments'
    ''
    'Keywords: http://www.w3schools.com/js/js_reserved.asp'
  )
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
